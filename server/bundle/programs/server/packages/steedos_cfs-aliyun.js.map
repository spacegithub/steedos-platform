{"version":3,"sources":["meteor://ðŸ’»app/packages/steedos:cfs-aliyun/checkNpm.js","meteor://ðŸ’»app/packages/steedos:cfs-aliyun/aliyun.server.js","meteor://ðŸ’»app/packages/steedos:cfs-aliyun/aliyun.stream.js"],"names":["checkNpmVersions","module","link","v","Meteor","settings","cfs","aliyun","Aliyun","require","FS","Store","OSS","name","options","self","Error","folder","length","replace","bucket","defaultAcl","ACL","region","endpoint","serviceParams","Utility","extend","accessKeyId","secretAccessKey","httpOptions","timeout","apiVersion","ossStore","pick","obj","keys","result","iteratee","arguments","i","key","hasOwnProperty","StorageAdapter","typeName","fileKey","fileObj","info","_getInfo","filename","filenameInStore","store","collectionName","_id","createReadStream","Bucket","Key","createWriteStream","aliases","contentType","metadata","remove","callback","deleteObject","error","console","log","watch","stream","prototype","params","option","o","getObject","s","_aliyunObject","_maxListeners","writeStream","Writable","highWaterMark","multipartUploadID","chunkSizeThreashold","awaitingCallback","currentChunk","Buffer","chunkNumber","parts","receivedSize","uploadedSize","runWhenReady","_write","incomingChunk","enc","next","concat","flushChunk","_originalEnd","end","chunk","encoding","call","lastChunk","uploadingChunk","copy","localChunkNumber","uploadPart","Body","UploadId","PartNumber","uploadPartCallback","abortUpload","JSON","stringify","ETag","_writableState","ended","closeUploadStream","completeMultipartUpload","CompleteMultipartUpload","Parts","debug","emit","size","storedAt","Date","errorText","abortMultipartUpload","abortError","createMultipartUpload","data"],"mappings":"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","file":"/packages/steedos_cfs-aliyun.js","sourcesContent":["import {\r\n  checkNpmVersions\r\n} from 'meteor/tmeasday:check-npm-versions';\r\n\r\nif (Meteor.settings && Meteor.settings.cfs && Meteor.settings.cfs.aliyun) {\r\n  checkNpmVersions({\r\n    'aliyun-sdk': '^1.9.2'\r\n  }, 'steedos:cfs-aliyun');\r\n\r\n  Aliyun = require('aliyun-sdk');\r\n}","if (!Aliyun)\r\n  return;\r\n\r\n// We use the official aws sdk\r\n\r\n/**\r\n * Creates an Aliyun OSS store instance on server. Inherits `FS.StorageAdapter`\r\n * type.\r\n *\r\n * @public\r\n * @constructor\r\n * @param {String} name      The store name\r\n * @param {Object} options   Storage options\r\n * @return {FS.Store.OSS}    An instance of FS.StorageAdapter.\r\n */\r\nFS.Store.OSS = function(name, options) {\r\n  var self = this;\r\n  if (!(self instanceof FS.Store.OSS)) {\r\n    throw new Error('FS.Store.OSS missing keyword \"new\"');\r\n  }\r\n\r\n  options = options || {};\r\n\r\n  // Determine which folder (key prefix) in the bucket to use\r\n  var folder = options.folder;\r\n  folder = typeof folder === 'string' && folder.length ?\r\n    folder.replace(/^\\//, '').replace(/\\/?$/, '/') : '';\r\n  folder = folder === '/' ? '' : folder;\r\n\r\n  // Determine which bucket to use, reruired\r\n  var bucket = options.bucket;\r\n  if (!bucket) {\r\n    throw new Error('FS.Store.OSS requires \"buckect\"');\r\n  }\r\n\r\n  // Those ACL values are allowed: 'private', 'public-read', 'public-read-write'\r\n  var defaultAcl = options.ACL || 'private';\r\n\r\n  var region = options.region || 'oss-cn-beijing';\r\n  // var regionList = ['oss-cn-hangzhou', 'oss-cn-beijing', 'oss-cn-qingdao',\r\n  //                   'oss-cn-shenzhen', 'oss-cn-hongkong'];\r\n  // if (regionList.indexOf(region) === -1) {\r\n  //   throw new Error('FS.Store.OSS invalid region');\r\n  // }\r\n\r\n  // var endpoint = 'http://' + region + (options.internal ? '-internal' : '') +\r\n  //                '.aliyuncs.com';\r\n  var endpoint = 'http://' + region + '.aliyuncs.com';\r\n\r\n  var serviceParams = FS.Utility.extend({\r\n    accessKeyId: null, // Required\r\n    secretAccessKey: null, // Required\r\n    endpoint: endpoint,\r\n    httpOptions: {\r\n      timeout: 60000\r\n    },\r\n    apiVersion: '2013-10-15' // Required, DO NOT UPDATE\r\n  }, options);\r\n\r\n  // Create S3 service\r\n  var ossStore = new Aliyun.OSS(serviceParams);\r\n\r\n  /**\r\n   * Pick keys from object\r\n   * @param  {Object} obj  Original object\r\n   * @param  {Array}  keys Array of keys to be preserved\r\n   * @return {Object}      New object\r\n   */\r\n  function pick(obj, keys) {\r\n    var result = {},\r\n      iteratee = keys[0];\r\n    if (obj == null || arguments.length < 2) return result;\r\n    for (var i = 0; i < keys.length; i++) {\r\n      var key = keys[i];\r\n      if (obj.hasOwnProperty(key)) {\r\n        result[key] = obj[key];\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  return new FS.StorageAdapter(name, options, {\r\n    typeName: 'storage.oss',\r\n    fileKey: function(fileObj) {\r\n      // Lookup the copy\r\n      var info = fileObj && fileObj._getInfo(name);\r\n      // If the store and key is found return the key\r\n      if (info && info.key) return info.key;\r\n\r\n      var filename = fileObj.name();\r\n      var filenameInStore = fileObj.name({\r\n        store: name\r\n      });\r\n\r\n      // If no store key found we resolve / generate a key\r\n      return fileObj.collectionName + '/' + fileObj.collectionName + \"-\" +\r\n        fileObj._id + '-' + (filenameInStore || filename);\r\n    },\r\n\r\n    createReadStream: function(fileKey, options) {\r\n      return ossStore.createReadStream({\r\n        Bucket: bucket,\r\n        Key: fileKey\r\n      }, options);\r\n    },\r\n    // Comment to documentation: Set options.ContentLength otherwise the\r\n    // indirect stream will be used creating extra overhead on the filesystem.\r\n    // An easy way if the data is not transformed is to set the\r\n    // options.ContentLength = fileObj.size ...\r\n    createWriteStream: function(fileKey, options) {\r\n      options = options || {};\r\n\r\n      // We dont support array of aliases\r\n      delete options.aliases;\r\n      // We dont support contentType\r\n      delete options.contentType;\r\n      // We dont support metadata use Metadata?\r\n      delete options.metadata;\r\n\r\n      // Set options\r\n      var options = FS.Utility.extend({\r\n        Bucket: bucket,\r\n        Key: folder + fileKey,\r\n        ACL: defaultAcl\r\n      }, options);\r\n\r\n      return ossStore.createWriteStream(options);\r\n    },\r\n    remove: function(fileKey, callback) {\r\n\r\n      ossStore.deleteObject({\r\n        Bucket: bucket,\r\n        Key: fileKey\r\n      }, function(error) {\r\n        console.log(error);\r\n        callback(error, !error);\r\n      });\r\n      // callback(null, true);\r\n    },\r\n    watch: function() {\r\n      throw new Error('OSS does not support watch.');\r\n    }\r\n  });\r\n};","if (!Aliyun)\r\n  return;\r\n\r\nvar stream = require('stream');\r\n\r\n/**\r\n * Wraps official put stream\r\n * @param  {[type]} params [description]\r\n * @param  {[type]} option [description]\r\n * @return {[type]}        [description]\r\n */\r\nAliyun.OSS.prototype.createReadStream = function(params, option) {\r\n  o = this.getObject(params);\r\n  s = o.createReadStream();\r\n  s._aliyunObject = o;\r\n  s._maxListeners = 100;\r\n  return s;\r\n};\r\n\r\n/**\r\n * Creates get put stream, inspired by github.com/meteormatt:\r\n * https://github.com/meteormatt/oss-upload-stream\r\n * @param  {Object} params CollectionFS Params\r\n * @param  {Object} option CollectionFS Options\r\n * @return {Stream}        writeStream object\r\n */\r\nAliyun.OSS.prototype.createWriteStream = function(params, option) {\r\n  var self = this;\r\n\r\n  // Scope variables\r\n  // Create the writable stream interface.\r\n  var writeStream = new stream.Writable({highWaterMark: 4194304}); // 4MB\r\n  var multipartUploadID = null;\r\n  var chunkSizeThreashold = 5242880;\r\n  var awaitingCallback;\r\n  var fileKey = params && (params.fileKey || params.Key);\r\n\r\n  // Current chunk\r\n  var currentChunk = Buffer(0);\r\n  var chunkNumber = 1;\r\n\r\n  // Status\r\n  var parts = [];\r\n  var receivedSize = 0;\r\n  var uploadedSize = 0;\r\n\r\n  var runWhenReady = function(callback) {\r\n    // If we dont have a upload id we are not ready\r\n    if (multipartUploadID === null) {\r\n      // We set the waiting callback\r\n      awaitingCallback = callback;\r\n    } else {\r\n      // No problem - just continue\r\n      callback();\r\n    }\r\n  };\r\n\r\n  // Handler to receive data and upload it to OSS.\r\n  writeStream._write = function(incomingChunk, enc, next) {\r\n    currentChunk = Buffer.concat([currentChunk, incomingChunk]);\r\n\r\n    // While the current chunk is larger than chunkSizeThreashold, we flush\r\n    // the chunk buffer to OSS via multipart upload.\r\n    if (currentChunk.length > chunkSizeThreashold) {\r\n      // Upload when necessary;\r\n      runWhenReady(function() { flushChunk(next, false); });\r\n    } else {\r\n      runWhenReady(next);\r\n    }\r\n  };\r\n\r\n  // Hijack the end method, send to OSS and complete.\r\n  var _originalEnd = writeStream.end;\r\n  writeStream.end = function(chunk, encoding, callback) {\r\n    _originalEnd.call(this, chunk, encoding, function() {\r\n      runWhenReady(function() { flushChunk(callback, true); });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Flushes chunk to Aliyun\r\n   * @param  {Function} callback  Callback, normally for next part of data.\r\n   * @param  {Boolean}  lastChunk If it's the last chunk.\r\n   * @return {undefined}\r\n   */\r\n  function flushChunk(callback, lastChunk) {\r\n    if (multipartUploadID === null) {\r\n      throw new Error('OSS Client Error: Missing mulitipart upload ID');\r\n    }\r\n\r\n    // Chunk to upload\r\n    var uploadingChunk = Buffer(currentChunk.length);\r\n    currentChunk.copy(uploadingChunk); // copies to target\r\n\r\n    var localChunkNumber = chunkNumber++;\r\n    receivedSize += uploadingChunk.length;\r\n\r\n    self.uploadPart({\r\n      Body: uploadingChunk,\r\n      Bucket: params.Bucket,\r\n      Key: params.Key,\r\n      UploadId: multipartUploadID,\r\n      PartNumber: localChunkNumber\r\n    }, uploadPartCallback);\r\n\r\n    // Reset the current buffer\r\n    currentChunk = Buffer(0);\r\n\r\n    function uploadPartCallback(error, result) {\r\n      // Handle error as the top priority;\r\n      if (error) {\r\n        abortUpload('OSS Client Error: ' + JSON.stringify(error));\r\n        return;\r\n      }\r\n\r\n      // Next part of data.\r\n      if (typeof callback === 'function') {\r\n        callback();\r\n      }\r\n\r\n      uploadedSize += uploadingChunk.length;\r\n      parts[localChunkNumber - 1] = {\r\n        ETag: result.ETag,\r\n        PartNumber: localChunkNumber\r\n      };\r\n\r\n      // Debug only.\r\n      // writeStream.emit('chunk', {\r\n      //   ETag: result.ETag,\r\n      //   PartNumber: localChunkNumber,\r\n      //   receivedSize: receivedSize,\r\n      //   uploadedSize: uploadedSize\r\n      // });\r\n\r\n      // While incoming stream is finished and we have uploaded everything,\r\n      // we would further notice OSS\r\n      if (writeStream._writableState.ended === true &&\r\n          uploadedSize === receivedSize && lastChunk) {\r\n        closeUploadStream();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Shuts down upload stream, calls Aliyun to merge every chunk of file\r\n   * @return {undefined}\r\n   */\r\n  function closeUploadStream() {\r\n    // Not possible without multipart upload id\r\n    if (!multipartUploadID) {\r\n      return;\r\n    }\r\n\r\n    self.completeMultipartUpload({\r\n      Bucket: params.Bucket,\r\n      Key: params.Key,\r\n      UploadId: multipartUploadID,\r\n      CompleteMultipartUpload: {Parts: parts}\r\n    }, function(error, result) {\r\n      if (error) {\r\n        abortUpload('OSS Client Error at Comletion: ' + JSON.stringify(error));\r\n        return;\r\n      }\r\n\r\n      if (FS.debug) {\r\n        console.log('SA OSS - DONE!!');\r\n      }\r\n      writeStream.emit('stored', {\r\n        fileKey: fileKey,\r\n        size: uploadedSize,\r\n        storedAt: new Date()\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When a fatal error occurs abort the multipart upload\r\n   * @param  {String} errorText Error text\r\n   * @return {undefined}\r\n   */\r\n  function abortUpload(errorText) {\r\n    self.abortMultipartUpload({\r\n      Bucket: params.Bucket,\r\n      Key: params.Key,\r\n      UploadId: multipartUploadID\r\n    }, function(abortError) {\r\n      if (abortError) {\r\n        writeStream.emit('error',\r\n                         errorText + '\\nOSS Client Abort Error: ' + abortError);\r\n      } else {\r\n        writeStream.emit('error', errorText);\r\n      }\r\n    });\r\n  };\r\n\r\n  self.createMultipartUpload(params, function(error, data) {\r\n    if (error) {\r\n      writeStream.emit('error', 'OSS Client Error: ' + JSON.stringify(error));\r\n      return;\r\n    }\r\n    multipartUploadID = data.UploadId;\r\n    // Call awaiting callback to start upload\r\n    if (typeof awaitingCallback === 'function') {\r\n      awaitingCallback();\r\n    }\r\n  });\r\n\r\n  return writeStream;\r\n};\r\n"]}