{"version":3,"sources":["meteor://ðŸ’»app/packages/steedos:cfs-s3/checkNpm.js","meteor://ðŸ’»app/packages/steedos:cfs-s3/s3.server.js","meteor://ðŸ’»app/packages/steedos:cfs-s3/s3.upload.stream2.js"],"names":["checkNpmVersions","module","link","v","Meteor","settings","cfs","aws","AWS","require","validS3ServiceParamKeys","validS3PutParamKeys","FS","Store","S3","name","options","self","Error","folder","length","slice","bucket","defaultAcl","ACL","serviceParams","Utility","extend","Bucket","region","accessKeyId","secretAccessKey","StorageAdapter","typeName","fileKey","fileObj","info","_getInfo","key","filename","filenameInStore","store","collectionName","_id","createReadStream","Key","createWriteStream","contentType","ContentType","aliases","metadata","remove","callback","deleteObject","error","watch","Writable","prototype","params","getObject","writeStream","highWaterMark","partNumber","parts","receivedSize","uploadedSize","currentChunk","Buffer","maxChunkSize","multipartUploadID","waitingCallback","runWhenReady","_write","chunk","enc","next","concat","flushChunk","_originalEnd","end","encoding","call","on","debug","console","log","abortMultipartUpload","UploadId","err","lastChunk","uploadingChunk","copy","localChunkNumber","uploadPart","Body","PartNumber","result","emit","ETag","_writableState","ended","completeMultipartUpload","MultipartUpload","Parts","size","storedAt","Date","createMultipartUpload","data"],"mappings":"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","file":"/packages/steedos_cfs-s3.js","sourcesContent":["import {\r\n  checkNpmVersions\r\n} from 'meteor/tmeasday:check-npm-versions';\r\n\r\nif (Meteor.settings && Meteor.settings.cfs && Meteor.settings.cfs.aws) {\r\n  checkNpmVersions({\r\n    'aws-sdk': \"^2.0.23\"\r\n  }, 'steedos:cfs-s3');\r\n\r\n  AWS = require('aws-sdk');\r\n}\r\n","if (!AWS)\r\n  return;\r\n\r\n// We use the official aws sdk\r\n\r\n\r\nvar validS3ServiceParamKeys = [\r\n  'endpoint',\r\n  'accessKeyId',\r\n  'secretAccessKey',\r\n  'sessionToken',\r\n  'credentials',\r\n  'credentialProvider',\r\n  'region',\r\n  'maxRetries',\r\n  'maxRedirects',\r\n  'sslEnabled',\r\n  'paramValidation',\r\n  'computeChecksums',\r\n  's3ForcePathStyle',\r\n  'httpOptions',\r\n  'apiVersion',\r\n  'apiVersions',\r\n  'logger',\r\n  'signatureVersion'\r\n];\r\nvar validS3PutParamKeys = [\r\n  'ACL',\r\n  'Body',\r\n  'Bucket',\r\n  'CacheControl',\r\n  'ContentDisposition',\r\n  'ContentEncoding',\r\n  'ContentLanguage',\r\n  'ContentLength',\r\n  'ContentMD5',\r\n  'ContentType',\r\n  'Expires',\r\n  'GrantFullControl',\r\n  'GrantRead',\r\n  'GrantReadACP',\r\n  'GrantWriteACP',\r\n  'Key',\r\n  'Metadata',\r\n  'ServerSideEncryption',\r\n  'StorageClass',\r\n  'WebsiteRedirectLocation'\r\n];\r\n\r\n/**\r\n * @public\r\n * @constructor\r\n * @param {String} name - The store name\r\n * @param {Object} options\r\n * @param {String} options.region - Bucket region\r\n * @param {String} options.bucket - Bucket name\r\n * @param {String} [options.accessKeyId] - AWS IAM key; required if not set in environment variables\r\n * @param {String} [options.secretAccessKey] - AWS IAM secret; required if not set in environment variables\r\n * @param {String} [options.ACL='private'] - ACL for objects when putting\r\n * @param {String} [options.folder='/'] - Which folder (key prefix) in the bucket to use\r\n * @param {Function} [options.beforeSave] - Function to run before saving a file from the server. The context of the function will be the `FS.File` instance we're saving. The function may alter its properties.\r\n * @param {Number} [options.maxTries=5] - Max times to attempt saving a file\r\n * @returns {FS.StorageAdapter} An instance of FS.StorageAdapter.\r\n *\r\n * Creates an S3 store instance on the server. Inherits from FS.StorageAdapter\r\n * type.\r\n */\r\nFS.Store.S3 = function(name, options) {\r\n  var self = this;\r\n  if (!(self instanceof FS.Store.S3))\r\n    throw new Error('FS.Store.S3 missing keyword \"new\"');\r\n\r\n  options = options || {};\r\n\r\n  // Determine which folder (key prefix) in the bucket to use\r\n  var folder = options.folder;\r\n  if (typeof folder === \"string\" && folder.length) {\r\n    if (folder.slice(0, 1) === \"/\") {\r\n      folder = folder.slice(1);\r\n    }\r\n    if (folder.slice(-1) !== \"/\") {\r\n      folder += \"/\";\r\n    }\r\n  } else {\r\n    folder = \"\";\r\n  }\r\n\r\n  var bucket = options.bucket;\r\n  if (!bucket)\r\n    throw new Error('FS.Store.S3 you must specify the \"bucket\" option');\r\n\r\n  var defaultAcl = options.ACL || 'private';\r\n\r\n  // Remove serviceParams from SA options\r\n  // options = _.omit(options, validS3ServiceParamKeys);\r\n\r\n  var serviceParams = FS.Utility.extend({\r\n    Bucket: bucket,\r\n    region: null, //required\r\n    accessKeyId: null, //required\r\n    secretAccessKey: null, //required\r\n    ACL: defaultAcl\r\n  }, options);\r\n\r\n  // Whitelist serviceParams, else aws-sdk throws an error\r\n  // XXX: I've commented this at the moment... It stopped things from working\r\n  // we have to check up on this\r\n  // serviceParams = _.pick(serviceParams, validS3ServiceParamKeys);\r\n\r\n  // Create S3 service\r\n  var S3 = new AWS.S3(serviceParams);\r\n\r\n  return new FS.StorageAdapter(name, options, {\r\n    typeName: 'storage.s3',\r\n    fileKey: function(fileObj) {\r\n      // Lookup the copy\r\n      var info = fileObj && fileObj._getInfo(name);\r\n      // If the store and key is found return the key\r\n      if (info && info.key) return info.key;\r\n\r\n      var filename = fileObj.name();\r\n      var filenameInStore = fileObj.name({\r\n        store: name\r\n      });\r\n\r\n      // If no store key found we resolve / generate a key\r\n      return fileObj.collectionName + '/' + fileObj.collectionName + \"-\" + fileObj._id + '-' + (filenameInStore || filename);\r\n    },\r\n    createReadStream: function(fileKey, options) {\r\n\r\n      return S3.createReadStream({\r\n        Bucket: bucket,\r\n        Key: folder + fileKey\r\n      });\r\n\r\n    },\r\n    // Comment to documentation: Set options.ContentLength otherwise the\r\n    // indirect stream will be used creating extra overhead on the filesystem.\r\n    // An easy way if the data is not transformed is to set the\r\n    // options.ContentLength = fileObj.size ...\r\n    createWriteStream: function(fileKey, options) {\r\n      options = options || {};\r\n\r\n      if (options.contentType) {\r\n        options.ContentType = options.contentType;\r\n      }\r\n\r\n      // We dont support array of aliases\r\n      delete options.aliases;\r\n      // We dont support contentType\r\n      delete options.contentType;\r\n      // We dont support metadata use Metadata?\r\n      delete options.metadata;\r\n\r\n      // Set options\r\n      var options = FS.Utility.extend({\r\n        Bucket: bucket,\r\n        Key: folder + fileKey,\r\n        fileKey: fileKey,\r\n        ACL: defaultAcl\r\n      }, options);\r\n\r\n      return S3.createWriteStream(options);\r\n    },\r\n    remove: function(fileKey, callback) {\r\n\r\n      S3.deleteObject({\r\n        Bucket: bucket,\r\n        Key: folder + fileKey\r\n      }, function(error) {\r\n        callback(error, !error);\r\n      });\r\n      // callback(null, true);\r\n    },\r\n    watch: function() {\r\n      throw new Error(\"S3 storage adapter does not support the sync option\");\r\n    }\r\n  });\r\n};","if (!AWS)\r\n  return;\r\n\r\nvar Writable = require('stream').Writable;\r\n\r\n// This is based on the code from\r\n// https://github.com/nathanpeck/s3-upload-stream/blob/master/lib/s3-upload-stream.js\r\n// But much is rewritten and adapted to cfs\r\n\r\nAWS.S3.prototype.createReadStream = function(params, options) {\r\n  // Simple wrapper\r\n  return this.getObject(params).createReadStream();\r\n};\r\n\r\n// Extend the AWS.S3 API\r\nAWS.S3.prototype.createWriteStream = function(params, options) {\r\n  var self = this;\r\n\r\n  //Create the writeable stream interface.\r\n  var writeStream = Writable({\r\n    highWaterMark: 4194304 // 4 MB\r\n  });\r\n\r\n  var partNumber = 1;\r\n  var parts = [];\r\n  var receivedSize = 0;\r\n  var uploadedSize = 0;\r\n  var currentChunk = Buffer(0);\r\n  var maxChunkSize = 5242880;\r\n  var multipartUploadID = null;\r\n  var waitingCallback;\r\n  var fileKey = params && (params.fileKey || params.Key);\r\n\r\n  // Clean up for AWS sdk\r\n  delete params.fileKey;\r\n\r\n  // This small function stops the write stream until we have connected with\r\n  // the s3 server\r\n  var runWhenReady = function(callback) {\r\n    // If we dont have a upload id we are not ready\r\n    if (multipartUploadID === null) {\r\n      // We set the waiting callback\r\n      waitingCallback = callback;\r\n    } else {\r\n      // No problem - just continue\r\n      callback();\r\n    }\r\n  };\r\n\r\n  //Handler to receive data and upload it to S3.\r\n  writeStream._write = function (chunk, enc, next) {\r\n    currentChunk = Buffer.concat([currentChunk, chunk]);\r\n\r\n    // If the current chunk buffer is getting to large, or the stream piped in\r\n    // has ended then flush the chunk buffer downstream to S3 via the multipart\r\n    // upload API.\r\n    if(currentChunk.length > maxChunkSize) {\r\n      // Make sure we only run when the s3 upload is ready\r\n      runWhenReady(function() { flushChunk(next, false); });\r\n    } else {\r\n      // We dont have to contact s3 for this\r\n      runWhenReady(next);\r\n    }\r\n  };\r\n\r\n  // Overwrite the end method so that we can hijack it to flush the last part\r\n  // and then complete the multipart upload\r\n  var _originalEnd = writeStream.end;\r\n  writeStream.end = function (chunk, encoding, callback) {\r\n    // Call the super\r\n    _originalEnd.call(this, chunk, encoding, function () {\r\n      // Make sure we only run when the s3 upload is ready\r\n      runWhenReady(function() { flushChunk(callback, true); });\r\n    });\r\n  };\r\n\r\n  writeStream.on('error', function () {\r\n    if (multipartUploadID) {\r\n      if (FS.debug) {\r\n        console.log('SA S3 - ERROR!!');\r\n      }\r\n      self.abortMultipartUpload({\r\n        Bucket: params.Bucket,\r\n        Key: params.Key,\r\n        UploadId: multipartUploadID\r\n      }, function (err) {\r\n        if(err) {\r\n          console.error('SA S3 - Could not abort multipart upload', err)\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  var flushChunk = function (callback, lastChunk) {\r\n    if (multipartUploadID === null) {\r\n      throw new Error('Internal error multipartUploadID is null');\r\n    }\r\n    // Get the chunk data\r\n    var uploadingChunk = Buffer(currentChunk.length);\r\n    currentChunk.copy(uploadingChunk);\r\n\r\n\r\n    // Store the current part number and then increase the counter\r\n    var localChunkNumber = partNumber++;\r\n\r\n    // We add the size of data\r\n    receivedSize += uploadingChunk.length;\r\n\r\n    // Upload the part\r\n    self.uploadPart({\r\n      Body: uploadingChunk,\r\n      Bucket: params.Bucket,\r\n      Key: params.Key,\r\n      UploadId: multipartUploadID,\r\n      PartNumber: localChunkNumber\r\n    }, function (err, result) {\r\n      // Call the next data\r\n      if(typeof callback === 'function') {\r\n        callback();\r\n      }\r\n\r\n      if(err) {\r\n        writeStream.emit('error', err);\r\n      } else {\r\n        // Increase the upload size\r\n        uploadedSize += uploadingChunk.length;\r\n        parts[localChunkNumber-1] = {\r\n          ETag: result.ETag,\r\n          PartNumber: localChunkNumber\r\n        };\r\n\r\n        // XXX: event for debugging\r\n        writeStream.emit('chunk', {\r\n          ETag: result.ETag,\r\n          PartNumber: localChunkNumber,\r\n          receivedSize: receivedSize,\r\n          uploadedSize: uploadedSize\r\n        });\r\n\r\n        // The incoming stream has finished giving us all data and we have\r\n        // finished uploading all that data to S3. So tell S3 to assemble those\r\n        // parts we uploaded into the final product.\r\n        if(writeStream._writableState.ended === true &&\r\n                uploadedSize === receivedSize && lastChunk) {\r\n          // Complete the upload\r\n          self.completeMultipartUpload({\r\n            Bucket: params.Bucket,\r\n            Key: params.Key,\r\n            UploadId: multipartUploadID,\r\n            MultipartUpload: {\r\n              Parts: parts\r\n            }\r\n          }, function (err, result) {\r\n            if(err) {\r\n              writeStream.emit('error', err);\r\n            } else {\r\n              // Emit the cfs end event for uploads\r\n              if (FS.debug) {\r\n                console.log('SA S3 - DONE!!');\r\n              }\r\n              writeStream.emit('stored', {\r\n                fileKey: fileKey,\r\n                size: uploadedSize,\r\n                storedAt: new Date()\r\n              });\r\n            }\r\n\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Reset the current buffer\r\n    currentChunk = Buffer(0);\r\n  };\r\n\r\n  //Use the S3 client to initialize a multipart upload to S3.\r\n  self.createMultipartUpload( params, function (err, data) {\r\n    if(err) {\r\n      // Emit the error\r\n      writeStream.emit('error', err);\r\n    } else {\r\n      // Set the upload id\r\n      multipartUploadID = data.UploadId;\r\n\r\n      // Call waiting callback\r\n      if (typeof waitingCallback === 'function') {\r\n        // We call the waiting callback if any now since we established a\r\n        // connection to the s3\r\n        waitingCallback();\r\n      }\r\n\r\n    }\r\n  });\r\n\r\n  // We return the write stream\r\n  return writeStream;\r\n};\r\n"]}