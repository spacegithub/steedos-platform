{"version":3,"sources":["meteor://💻app/packages/steedos:odata/checkNpm.js","meteor://💻app/packages/steedos_odata/lib/restivus/auth.coffee","meteor://💻app/lib/restivus/auth.coffee","meteor://💻app/packages/steedos:odata/lib/restivus/iron-router-error-to-response.js","meteor://💻app/packages/steedos_odata/lib/restivus/route.coffee","meteor://💻app/lib/restivus/route.coffee","meteor://💻app/packages/steedos_odata/lib/restivus/restivus.coffee","meteor://💻app/lib/restivus/restivus.coffee","meteor://💻app/packages/steedos_odata/server/objects.coffee","meteor://💻app/server/objects.coffee","meteor://💻app/packages/steedos_odata/server/odata.coffee","meteor://💻app/server/odata.coffee","meteor://💻app/packages/steedos_odata/server/middleware.coffee","meteor://💻app/server/middleware.coffee","meteor://💻app/packages/steedos_odata/server/metadata.coffee","meteor://💻app/server/metadata.coffee","meteor://💻app/packages/steedos_odata/core.coffee","meteor://💻app/core.coffee"],"names":["checkNpmVersions","module","link","v","require","cookies","getUserQuerySelector","userValidator","Auth","Match","Where","user","check","id","Optional","String","username","email","_","keys","length","Error","loginWithPassword","password","authToken","authenticatingUser","authenticatingUserSelector","hashedToken","passwordVerification","ref","space_users","spaces","Meteor","users","findOne","services","Accounts","_checkPassword","error","_generateStampedLoginToken","_hashStampedToken","_insertHashedLoginToken","_id","db","find","fetch","each","su","space","Steedos","hasFeature","indexOf","admins","push","name","token","userId","adminSpaces","env","process","NODE_ENV","ironRouterSendErrorToResponse","err","req","res","statusCode","status","msg","stack","toString","console","headersSent","socket","destroy","setHeader","Buffer","byteLength","method","end","share","Route","api","path","options","endpoints1","endpoints","prototype","addToApi","availableMethods","allowedMethods","fullPath","rejectedMethods","self","contains","_config","paths","extend","defaultOptionsEndpoint","_resolveEndpoints","_configureEndpoints","filter","reject","apiPath","endpoint","JsonRoutes","add","doneFunc","endpointContext","responseData","responseInitiated","urlParams","params","queryParams","query","bodyParams","body","request","response","done","_callEndpoint","error1","headers","_respond","message","join","toUpperCase","isFunction","action","ref1","ref2","roleRequired","union","isEmpty","authRequired","spaceRequired","invocation","_authAccepted","_roleAccepted","_spaceAccepted","DDPCommon","MethodInvocation","isSimulation","connection","randomSeed","makeRpcSeed","DDP","_CurrentInvocation","withValue","call","_authenticate","auth","userSelector","space_users_count","spaceId","count","intersection","roles","defaultHeaders","delayInMilliseconds","minimumDelayInMilliseconds","randomMultiplierBetweenOneAndTwo","sendResponse","_lowerCaseKeys","match","prettyJson","JSON","stringify","writeHead","write","Math","random","setTimeout","object","chain","pairs","map","attr","toLowerCase","value","Cookies","OdataRestivus","basicAuth","item","i","l","corsHeaders","_routes","useDefaultAuth","version","_user","get","_hashLoginToken","enableCors","slice","last","_initAuth","useAuth","warn","addRoute","route","addCollection","collection","collectionEndpoints","collectionRouteEndpoints","endpointsAwaitingConfiguration","entityRouteEndpoints","excludedEndpoints","methods","methodsOnCollection","routeOptions","_userCollectionEndpoints","_collectionEndpoints","_name","configuredEndpoint","endpointOptions","methodType","clone","entity","selector","data","put","entityIsUpdated","update","$set","remove","post","entityId","insert","getAll","entities","fields","profile","createUser","logout","e","extraData","searchQuery","reason","onLoggedIn","extra","index","tokenFieldName","tokenLocation","tokenPath","tokenRemovalQuery","tokenToRemove","lastIndexOf","substring","$pull","onLoggedOut","startup","getObject","getObjects","object_names","split","forEach","object_name","object_permissions","psets","psetsAdmin","psetsCurrent","psetsUser","Creator","Objects","getObjectName","getCollection","assigned_apps","getObjectPermissions","bind","list_views","permission_set","allowRead","allowEdit","allowDelete","allowCreate","modifyAllRecords","field","key","_field","uneditable_fields","readonly","unreadable_fields","SteedosOData","API_PATH","next","_obj","getUserIdFromAuthToken","sendResult","code","errors","MeteorODataAPIV4Router","MeteorODataRouter","ODataRouter","app","express","use","WebApp","connectHandlers","steedosSchema","getDataSources","datasource","otherApp","Fiber","authorizationCache","Middleware","app_id","app_login_token","client_id","isAuthed","loginTokens","result","access_token","log","getUserIdFromAccessToken","parse","pass","resume","t","run","ServiceDocument","ServiceMetadata","_BOOLEAN_TYPES","_DATETIME_OFFSET_TYPES","_NAMESPACE","_NUMBER_TYPES","getObjectsOdataSchema","container_schema","entities_schema","schema","VERSION","dataServices","namespace","entityType","annotations","Collections","list","_object","entitie","navigationProperty","property","enable_api","propertyRef","computedKey","_key","target","annotation","type","nullable","field_name","_property","reference_to","precision","required","isArray","r","reference_obj","EXPAND_FIELD_SUFFIX","partner","_re_name","referentialConstraint","referencedProperty","entityContainer","entitySet","_et","k","SteedosOdataAPI","AUTHREQUIRED","context","serviceDocument","getMetaDataPath","processMetadataJson","document","METADATA_PATH","serviceMetadata","getRootPath","absoluteUrl","getODataPath","isServer","getODataContextPath","getODataNextLinkPath"],"mappings":"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","file":"/packages/steedos_odata.js","sourcesContent":["// fix warning: xxx not installed\nrequire(\"basic-auth/package.json\");\n\nimport { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\ncheckNpmVersions({\n\t'basic-auth': '^2.0.1',\n\t'odata-v4-service-metadata': \"^0.1.6\",\n\t\"odata-v4-service-document\": \"^0.0.3\",\n\tcookies: \"^0.6.1\",\n}, 'steedos:odata');\n","@Auth or= {}\n\n###\n\tA valid user will have exactly one of the following identification fields: id, username, or email\n###\nuserValidator = Match.Where (user) ->\n\tcheck user,\n\t\tid: Match.Optional String\n\t\tusername: Match.Optional String\n\t\temail: Match.Optional String\n\n\tif _.keys(user).length is not 1\n\t\tthrow new Match.Error 'User must have exactly one identifier field'\n\n\treturn true\n\n\n###\n\tReturn a MongoDB query selector for finding the given user\n###\ngetUserQuerySelector = (user) ->\n\tif user.id\n\t\treturn {'_id': user.id}\n\telse if user.username\n\t\treturn {'username': user.username}\n\telse if user.email\n\t\treturn {'emails.address': user.email}\n\n\t# We shouldn't be here if the user object was properly validated\n\tthrow new Error 'Cannot create selector from invalid user'\n\n\n###\n\tLog a user in with their password\n###\n@Auth.loginWithPassword = (user, password) ->\n\tif not user or not password\n\t\tthrow new Meteor.Error 401, 'Unauthorized'\n\n\t# Validate the login input types\n\tcheck user, userValidator\n\tcheck password, String\n\n\t# Retrieve the user from the database\n\tauthenticatingUserSelector = getUserQuerySelector(user)\n\tauthenticatingUser = Meteor.users.findOne(authenticatingUserSelector)\n\n\tif not authenticatingUser\n\t\tthrow new Meteor.Error 401, 'Unauthorized'\n\tif not authenticatingUser.services?.password\n\t\tthrow new Meteor.Error 401, 'Unauthorized'\n\n\t# Authenticate the user's password\n\tpasswordVerification = Accounts._checkPassword authenticatingUser, password\n\tif passwordVerification.error\n\t\tthrow new Meteor.Error 401, 'Unauthorized'\n\n\t# Add a new auth token to the user's account\n\tauthToken = Accounts._generateStampedLoginToken()\n\thashedToken = Accounts._hashStampedToken authToken\n\tAccounts._insertHashedLoginToken authenticatingUser._id, hashedToken\n\n\tspace_users = db.space_users.find({user: authenticatingUser._id}).fetch()\n\tspaces = []\n\t_.each space_users, (su)->\n\t\tspace = db.spaces.findOne(su.space)\n\t\t# space must be paid, and user must be admins\n\t\tif space && Steedos.hasFeature('paid', space?._id) and _.indexOf(space.admins, su.user)>=0\n\t\t\tspaces.push\n\t\t\t\t_id: space._id\n\t\t\t\tname: space.name\n\treturn {authToken: authToken.token, userId: authenticatingUser._id, adminSpaces: spaces}\n","var getUserQuerySelector, userValidator;\n\nthis.Auth || (this.Auth = {});\n\n\n/*\n\tA valid user will have exactly one of the following identification fields: id, username, or email\n */\n\nuserValidator = Match.Where(function(user) {\n  check(user, {\n    id: Match.Optional(String),\n    username: Match.Optional(String),\n    email: Match.Optional(String)\n  });\n  if (_.keys(user).length === !1) {\n    throw new Match.Error('User must have exactly one identifier field');\n  }\n  return true;\n});\n\n\n/*\n\tReturn a MongoDB query selector for finding the given user\n */\n\ngetUserQuerySelector = function(user) {\n  if (user.id) {\n    return {\n      '_id': user.id\n    };\n  } else if (user.username) {\n    return {\n      'username': user.username\n    };\n  } else if (user.email) {\n    return {\n      'emails.address': user.email\n    };\n  }\n  throw new Error('Cannot create selector from invalid user');\n};\n\n\n/*\n\tLog a user in with their password\n */\n\nthis.Auth.loginWithPassword = function(user, password) {\n  var authToken, authenticatingUser, authenticatingUserSelector, hashedToken, passwordVerification, ref, space_users, spaces;\n  if (!user || !password) {\n    throw new Meteor.Error(401, 'Unauthorized');\n  }\n  check(user, userValidator);\n  check(password, String);\n  authenticatingUserSelector = getUserQuerySelector(user);\n  authenticatingUser = Meteor.users.findOne(authenticatingUserSelector);\n  if (!authenticatingUser) {\n    throw new Meteor.Error(401, 'Unauthorized');\n  }\n  if (!((ref = authenticatingUser.services) != null ? ref.password : void 0)) {\n    throw new Meteor.Error(401, 'Unauthorized');\n  }\n  passwordVerification = Accounts._checkPassword(authenticatingUser, password);\n  if (passwordVerification.error) {\n    throw new Meteor.Error(401, 'Unauthorized');\n  }\n  authToken = Accounts._generateStampedLoginToken();\n  hashedToken = Accounts._hashStampedToken(authToken);\n  Accounts._insertHashedLoginToken(authenticatingUser._id, hashedToken);\n  space_users = db.space_users.find({\n    user: authenticatingUser._id\n  }).fetch();\n  spaces = [];\n  _.each(space_users, function(su) {\n    var space;\n    space = db.spaces.findOne(su.space);\n    if (space && Steedos.hasFeature('paid', space != null ? space._id : void 0) && _.indexOf(space.admins, su.user) >= 0) {\n      return spaces.push({\n        _id: space._id,\n        name: space.name\n      });\n    }\n  });\n  return {\n    authToken: authToken.token,\n    userId: authenticatingUser._id,\n    adminSpaces: spaces\n  };\n};\n","// We need a function that treats thrown errors exactly like Iron Router would.\n// This file is written in JavaScript to enable copy-pasting Iron Router code.\n\n// Taken from: https://github.com/iron-meteor/iron-router/blob/9c369499c98af9fd12ef9e68338dee3b1b1276aa/lib/router_server.js#L3\nvar env = process.env.NODE_ENV || 'development';\n\n// Taken from: https://github.com/iron-meteor/iron-router/blob/9c369499c98af9fd12ef9e68338dee3b1b1276aa/lib/router_server.js#L47\nironRouterSendErrorToResponse = function(err, req, res) {\n\tif (res.statusCode < 400)\n\t\tres.statusCode = 500;\n\n\tif (err.status)\n\t\tres.statusCode = err.status;\n\n\tif (env === 'development')\n\t\tmsg = (err.stack || err.toString()) + '\\n';\n\telse\n\t//XXX get this from standard dict of error messages?\n\t\tmsg = 'Server error.';\n\n\tconsole.error(err.stack || err.toString());\n\n\tif (res.headersSent)\n\t\treturn req.socket.destroy();\n\n\tres.setHeader('Content-Type', 'text/html');\n\tres.setHeader('Content-Length', Buffer.byteLength(msg));\n\tif (req.method === 'HEAD')\n\t\treturn res.end();\n\tres.end(msg);\n\treturn;\n}\n","class share.Route\n\n\tconstructor: (@api, @path, @options, @endpoints) ->\n\t\t# Check if options were provided\n\t\tif not @endpoints\n\t\t\t@endpoints = @options\n\t\t\t@options = {}\n\n\n\taddToApi: do ->\n\t\tavailableMethods = ['get', 'post', 'put', 'patch', 'delete', 'options']\n\n\t\treturn ->\n\t\t\tself = this\n\n\t\t\t# Throw an error if a route has already been added at this path\n\t\t\t# TODO: Check for collisions with paths that follow same pattern with different parameter names\n\t\t\tif _.contains @api._config.paths, @path\n\t\t\t\tthrow new Error \"Cannot add a route at an existing path: #{@path}\"\n\n\t\t\t# Override the default OPTIONS endpoint with our own\n\t\t\t@endpoints = _.extend options: @api._config.defaultOptionsEndpoint, @endpoints\n\n\t\t\t# Configure each endpoint on this route\n\t\t\t@_resolveEndpoints()\n\t\t\t@_configureEndpoints()\n\n\t\t\t# Add to our list of existing paths\n\t\t\t@api._config.paths.push @path\n\n\t\t\tallowedMethods = _.filter availableMethods, (method) ->\n\t\t\t\t_.contains(_.keys(self.endpoints), method)\n\t\t\trejectedMethods = _.reject availableMethods, (method) ->\n\t\t\t\t_.contains(_.keys(self.endpoints), method)\n\n\t\t\t# Setup endpoints on route\n\t\t\tfullPath = @api._config.apiPath + @path\n\t\t\t_.each allowedMethods, (method) ->\n\t\t\t\tendpoint = self.endpoints[method]\n\t\t\t\tJsonRoutes.add method, fullPath, (req, res) ->\n\t\t\t\t\t# Add function to endpoint context for indicating a response has been initiated manually\n\t\t\t\t\tresponseInitiated = false\n\t\t\t\t\tdoneFunc = ->\n\t\t\t\t\t\tresponseInitiated = true\n\n\t\t\t\t\tendpointContext =\n\t\t\t\t\t\turlParams: req.params\n\t\t\t\t\t\tqueryParams: req.query\n\t\t\t\t\t\tbodyParams: req.body\n\t\t\t\t\t\trequest: req\n\t\t\t\t\t\tresponse: res\n\t\t\t\t\t\tdone: doneFunc\n\t\t\t\t\t# Add endpoint config options to context\n\t\t\t\t\t_.extend endpointContext, endpoint\n\n\t\t\t\t\t# Run the requested endpoint\n\t\t\t\t\tresponseData = null\n\t\t\t\t\ttry\n\t\t\t\t\t\tresponseData = self._callEndpoint endpointContext, endpoint\n\t\t\t\t\tcatch error\n\t\t\t\t\t\t# Do exactly what Iron Router would have done, to avoid changing the API\n\t\t\t\t\t\tironRouterSendErrorToResponse(error, req, res);\n\t\t\t\t\t\treturn\n\n\t\t\t\t\tif responseInitiated\n\t\t\t\t\t\t# Ensure the response is properly completed\n\t\t\t\t\t\tres.end()\n\t\t\t\t\t\treturn\n\t\t\t\t\telse\n\t\t\t\t\t\tif res.headersSent\n\t\t\t\t\t\t\tthrow new Error \"Must call this.done() after handling endpoint response manually: #{method} #{fullPath}\"\n\t\t\t\t\t\telse if responseData is null or responseData is undefined\n\t\t\t\t\t\t\tthrow new Error \"Cannot return null or undefined from an endpoint: #{method} #{fullPath}\"\n\n\t\t\t\t\t# Generate and return the http response, handling the different endpoint response types\n\t\t\t\t\tif responseData.body and (responseData.statusCode or responseData.headers)\n\t\t\t\t\t\tself._respond res, responseData.body, responseData.statusCode, responseData.headers\n\t\t\t\t\telse\n\t\t\t\t\t\tself._respond res, responseData\n\n\t\t\t_.each rejectedMethods, (method) ->\n\t\t\t\tJsonRoutes.add method, fullPath, (req, res) ->\n\t\t\t\t\tresponseData = status: 'error', message: 'API endpoint does not exist'\n\t\t\t\t\theaders = 'Allow': allowedMethods.join(', ').toUpperCase()\n\t\t\t\t\tself._respond res, responseData, 405, headers\n\n\n\t###\n\t\tConvert all endpoints on the given route into our expected endpoint object if it is a bare\n\t\tfunction\n\n\t\t@param {Route} route The route the endpoints belong to\n\t###\n\t_resolveEndpoints: ->\n\t\t_.each @endpoints, (endpoint, method, endpoints) ->\n\t\t\tif _.isFunction(endpoint)\n\t\t\t\tendpoints[method] = {action: endpoint}\n\t\treturn\n\n\n\t###\n\t\tConfigure the authentication and role requirement on all endpoints (except OPTIONS, which must\n\t\tbe configured directly on the endpoint)\n\n\t\tAuthentication can be required on an entire route or individual endpoints. If required on an\n\t\tentire route, that serves as the default. If required in any individual endpoints, that will\n\t\toverride the default.\n\n\t\tAfter the endpoint is configured, all authentication and role requirements of an endpoint can be\n\t\taccessed at <code>endpoint.authRequired</code> and <code>endpoint.roleRequired</code>,\n\t\trespectively.\n\n\t\t@param {Route} route The route the endpoints belong to\n\t\t@param {Endpoint} endpoint The endpoint to configure\n\t###\n\t_configureEndpoints: ->\n\t\t_.each @endpoints, (endpoint, method) ->\n\t\t\tif method isnt 'options'\n\t\t\t\t# Configure acceptable roles\n\t\t\t\tif not @options?.roleRequired\n\t\t\t\t\t@options.roleRequired = []\n\t\t\t\tif not endpoint.roleRequired\n\t\t\t\t\tendpoint.roleRequired = []\n\t\t\t\tendpoint.roleRequired = _.union endpoint.roleRequired, @options.roleRequired\n\t\t\t\t# Make it easier to check if no roles are required\n\t\t\t\tif _.isEmpty endpoint.roleRequired\n\t\t\t\t\tendpoint.roleRequired = false\n\n\t\t\t\t# Configure auth requirement\n\t\t\t\tif endpoint.authRequired is undefined\n\t\t\t\t\tif @options?.authRequired or endpoint.roleRequired\n\t\t\t\t\t\tendpoint.authRequired = true\n\t\t\t\t\telse\n\t\t\t\t\t\tendpoint.authRequired = false\n\n\t\t\t\tif @options?.spaceRequired\n\t\t\t\t\tendpoint.spaceRequired = @options.spaceRequired\n\t\t\t\treturn\n\t\t, this\n\t\treturn\n\n\n\t###\n\t\tAuthenticate an endpoint if required, and return the result of calling it\n\n\t\t@returns The endpoint response or a 401 if authentication fails\n\t###\n\t_callEndpoint: (endpointContext, endpoint) ->\n\t\t# Call the endpoint if authentication doesn't fail\n\t\tif @_authAccepted endpointContext, endpoint\n\t\t\tif @_roleAccepted endpointContext, endpoint\n\t\t\t\tif @_spaceAccepted endpointContext, endpoint\n\t\t\t\t\t#endpoint.action.call endpointContext\n\t\t\t\t\tinvocation = new DDPCommon.MethodInvocation\n\t\t\t\t\t\tisSimulation: true,\n\t\t\t\t\t\tuserId: endpointContext.userId,\n\t\t\t\t\t\tconnection: null,\n\t\t\t\t\t\trandomSeed: DDPCommon.makeRpcSeed()\n\n\t\t\t\t\treturn DDP._CurrentInvocation.withValue invocation, ->\n\t\t\t\t\t\treturn endpoint.action.call(endpointContext);\n\t\t\t\telse\n\t\t\t\t\tstatusCode: 403\n\t\t\t\t\tbody: {status: 'error', message: 'Bad X-Space-Id, Only admins of paid space can call this api.'}\n\t\t\telse\n\t\t\t\tstatusCode: 403\n\t\t\t\tbody: {status: 'error', message: 'You do not have permission to do this.'}\n\t\telse\n\t\t\tstatusCode: 401\n\t\t\tbody: {status: 'error', message: 'You must be logged in to do this.'}\n\n\n\t###\n\t\tAuthenticate the given endpoint if required\n\n\t\tOnce it's globally configured in the API, authentication can be required on an entire route or\n\t\tindividual endpoints. If required on an entire endpoint, that serves as the default. If required\n\t\tin any individual endpoints, that will override the default.\n\n\t\t@returns False if authentication fails, and true otherwise\n\t###\n\t_authAccepted: (endpointContext, endpoint) ->\n\t\tif endpoint.authRequired\n\t\t\t@_authenticate endpointContext\n\t\telse true\n\n\n\t###\n\t\tVerify the request is being made by an actively logged in user\n\n\t\tIf verified, attach the authenticated user to the context.\n\n\t\t@returns {Boolean} True if the authentication was successful\n\t###\n\t_authenticate: (endpointContext) ->\n\t\t# Get auth info\n\t\tauth = @api._config.auth.user.call(endpointContext)\n\n\t\t# Get the user from the database\n\t\tif auth?.userId and auth?.token and not auth?.user\n\t\t\tuserSelector = {}\n\t\t\tuserSelector._id = auth.userId\n\t\t\tuserSelector[@api._config.auth.token] = auth.token\n\t\t\tauth.user = Meteor.users.findOne userSelector\n\n\t\t# Attach the user and their ID to the context if the authentication was successful\n\t\tif auth?.user\n\t\t\tendpointContext.user = auth.user\n\t\t\tendpointContext.userId = auth.user._id\n\t\t\ttrue\n\t\telse false\n\n\t###\n\t\tAuthenticate the user role if required\n\n\t\tMust be called after _authAccepted().\n\n\t\t@returns True if the authenticated user belongs to <i>any</i> of the acceptable roles on the\n\t\t\t\t\t\t endpoint\n\t###\n\t_spaceAccepted: (endpointContext, endpoint) ->\n\t\tif endpoint.spaceRequired\n\t\t\tauth = @api._config.auth.user.call(endpointContext)\n\t\t\tif auth?.spaceId\n\t\t\t\tspace_users_count = db.space_users.find({user: auth.userId, space:auth.spaceId}).count()\n\t\t\t\tif space_users_count\n\t\t\t\t\tspace = db.spaces.findOne(auth.spaceId)\n\t\t\t\t\t# space must be paid, and user must be admins\n\t\t\t\t\tif space && Steedos.hasFeature('paid', space._id) and _.indexOf(space.admins, auth.userId)>=0\n\t\t\t\t\t\tendpointContext.spaceId = auth.spaceId\n\t\t\t\t\t\treturn true\n\t\t\tendpointContext.spaceId = \"bad\"\n\t\t\treturn false\n\t\treturn true\n\n\t###\n\t\tAuthenticate the user role if required\n\n\t\tMust be called after _authAccepted().\n\n\t\t@returns True if the authenticated user belongs to <i>any</i> of the acceptable roles on the\n\t\t\t\t\t\t endpoint\n\t###\n\t_roleAccepted: (endpointContext, endpoint) ->\n\t\tif endpoint.roleRequired\n\t\t\tif _.isEmpty _.intersection(endpoint.roleRequired, endpointContext.user.roles)\n\t\t\t\treturn false\n\t\ttrue\n\n\n\t###\n\t\tRespond to an HTTP request\n\t###\n\t_respond: (response, body, statusCode=200, headers={}) ->\n\t\t# Override any default headers that have been provided (keys are normalized to be case insensitive)\n\t\t# TODO: Consider only lowercasing the header keys we need normalized, like Content-Type\n\t\tdefaultHeaders = @_lowerCaseKeys @api._config.defaultHeaders\n\t\theaders = @_lowerCaseKeys headers\n\t\theaders = _.extend defaultHeaders, headers\n\n\t\t# Prepare JSON body for response when Content-Type indicates JSON type\n\t\tif headers['content-type'].match(/json|javascript/) isnt null\n\t\t\tif @api._config.prettyJson\n\t\t\t\tbody = JSON.stringify body, undefined, 2\n\t\t\telse\n\t\t\t\tbody = JSON.stringify body\n\n\t\t# Send response\n\t\tsendResponse = ->\n\t\t\tresponse.writeHead statusCode, headers\n\t\t\tresponse.write body\n\t\t\tresponse.end()\n\t\tif statusCode in [401, 403]\n\t\t\t# Hackers can measure the response time to determine things like whether the 401 response was\n\t\t\t# caused by bad user id vs bad password.\n\t\t\t# In doing so, they can first scan for valid user ids regardless of valid passwords.\n\t\t\t# Delay by a random amount to reduce the ability for a hacker to determine the response time.\n\t\t\t# See https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks#Finding_Other_Countermeasures\n\t\t\t# See https://en.wikipedia.org/wiki/Timing_attack\n\t\t\tminimumDelayInMilliseconds = 500\n\t\t\trandomMultiplierBetweenOneAndTwo = 1 + Math.random()\n\t\t\tdelayInMilliseconds = minimumDelayInMilliseconds * randomMultiplierBetweenOneAndTwo\n\t\t\tMeteor.setTimeout sendResponse, delayInMilliseconds\n\t\telse\n\t\t\tsendResponse()\n\n\t###\n\t\tReturn the object with all of the keys converted to lowercase\n\t###\n\t_lowerCaseKeys: (object) ->\n\t\t_.chain object\n\t\t.pairs()\n\t\t.map (attr) ->\n\t\t\t[attr[0].toLowerCase(), attr[1]]\n\t\t.object()\n\t\t.value()\n","share.Route = (function() {\n  function Route(api, path, options, endpoints1) {\n    this.api = api;\n    this.path = path;\n    this.options = options;\n    this.endpoints = endpoints1;\n    if (!this.endpoints) {\n      this.endpoints = this.options;\n      this.options = {};\n    }\n  }\n\n  Route.prototype.addToApi = (function() {\n    var availableMethods;\n    availableMethods = ['get', 'post', 'put', 'patch', 'delete', 'options'];\n    return function() {\n      var allowedMethods, fullPath, rejectedMethods, self;\n      self = this;\n      if (_.contains(this.api._config.paths, this.path)) {\n        throw new Error(\"Cannot add a route at an existing path: \" + this.path);\n      }\n      this.endpoints = _.extend({\n        options: this.api._config.defaultOptionsEndpoint\n      }, this.endpoints);\n      this._resolveEndpoints();\n      this._configureEndpoints();\n      this.api._config.paths.push(this.path);\n      allowedMethods = _.filter(availableMethods, function(method) {\n        return _.contains(_.keys(self.endpoints), method);\n      });\n      rejectedMethods = _.reject(availableMethods, function(method) {\n        return _.contains(_.keys(self.endpoints), method);\n      });\n      fullPath = this.api._config.apiPath + this.path;\n      _.each(allowedMethods, function(method) {\n        var endpoint;\n        endpoint = self.endpoints[method];\n        return JsonRoutes.add(method, fullPath, function(req, res) {\n          var doneFunc, endpointContext, error, responseData, responseInitiated;\n          responseInitiated = false;\n          doneFunc = function() {\n            return responseInitiated = true;\n          };\n          endpointContext = {\n            urlParams: req.params,\n            queryParams: req.query,\n            bodyParams: req.body,\n            request: req,\n            response: res,\n            done: doneFunc\n          };\n          _.extend(endpointContext, endpoint);\n          responseData = null;\n          try {\n            responseData = self._callEndpoint(endpointContext, endpoint);\n          } catch (error1) {\n            error = error1;\n            ironRouterSendErrorToResponse(error, req, res);\n            return;\n          }\n          if (responseInitiated) {\n            res.end();\n            return;\n          } else {\n            if (res.headersSent) {\n              throw new Error(\"Must call this.done() after handling endpoint response manually: \" + method + \" \" + fullPath);\n            } else if (responseData === null || responseData === void 0) {\n              throw new Error(\"Cannot return null or undefined from an endpoint: \" + method + \" \" + fullPath);\n            }\n          }\n          if (responseData.body && (responseData.statusCode || responseData.headers)) {\n            return self._respond(res, responseData.body, responseData.statusCode, responseData.headers);\n          } else {\n            return self._respond(res, responseData);\n          }\n        });\n      });\n      return _.each(rejectedMethods, function(method) {\n        return JsonRoutes.add(method, fullPath, function(req, res) {\n          var headers, responseData;\n          responseData = {\n            status: 'error',\n            message: 'API endpoint does not exist'\n          };\n          headers = {\n            'Allow': allowedMethods.join(', ').toUpperCase()\n          };\n          return self._respond(res, responseData, 405, headers);\n        });\n      });\n    };\n  })();\n\n\n  /*\n  \t\tConvert all endpoints on the given route into our expected endpoint object if it is a bare\n  \t\tfunction\n  \n  \t\t@param {Route} route The route the endpoints belong to\n   */\n\n  Route.prototype._resolveEndpoints = function() {\n    _.each(this.endpoints, function(endpoint, method, endpoints) {\n      if (_.isFunction(endpoint)) {\n        return endpoints[method] = {\n          action: endpoint\n        };\n      }\n    });\n  };\n\n\n  /*\n  \t\tConfigure the authentication and role requirement on all endpoints (except OPTIONS, which must\n  \t\tbe configured directly on the endpoint)\n  \n  \t\tAuthentication can be required on an entire route or individual endpoints. If required on an\n  \t\tentire route, that serves as the default. If required in any individual endpoints, that will\n  \t\toverride the default.\n  \n  \t\tAfter the endpoint is configured, all authentication and role requirements of an endpoint can be\n  \t\taccessed at <code>endpoint.authRequired</code> and <code>endpoint.roleRequired</code>,\n  \t\trespectively.\n  \n  \t\t@param {Route} route The route the endpoints belong to\n  \t\t@param {Endpoint} endpoint The endpoint to configure\n   */\n\n  Route.prototype._configureEndpoints = function() {\n    _.each(this.endpoints, function(endpoint, method) {\n      var ref, ref1, ref2;\n      if (method !== 'options') {\n        if (!((ref = this.options) != null ? ref.roleRequired : void 0)) {\n          this.options.roleRequired = [];\n        }\n        if (!endpoint.roleRequired) {\n          endpoint.roleRequired = [];\n        }\n        endpoint.roleRequired = _.union(endpoint.roleRequired, this.options.roleRequired);\n        if (_.isEmpty(endpoint.roleRequired)) {\n          endpoint.roleRequired = false;\n        }\n        if (endpoint.authRequired === void 0) {\n          if (((ref1 = this.options) != null ? ref1.authRequired : void 0) || endpoint.roleRequired) {\n            endpoint.authRequired = true;\n          } else {\n            endpoint.authRequired = false;\n          }\n        }\n        if ((ref2 = this.options) != null ? ref2.spaceRequired : void 0) {\n          endpoint.spaceRequired = this.options.spaceRequired;\n        }\n      }\n    }, this);\n  };\n\n\n  /*\n  \t\tAuthenticate an endpoint if required, and return the result of calling it\n  \n  \t\t@returns The endpoint response or a 401 if authentication fails\n   */\n\n  Route.prototype._callEndpoint = function(endpointContext, endpoint) {\n    var invocation;\n    if (this._authAccepted(endpointContext, endpoint)) {\n      if (this._roleAccepted(endpointContext, endpoint)) {\n        if (this._spaceAccepted(endpointContext, endpoint)) {\n          invocation = new DDPCommon.MethodInvocation({\n            isSimulation: true,\n            userId: endpointContext.userId,\n            connection: null,\n            randomSeed: DDPCommon.makeRpcSeed()\n          });\n          return DDP._CurrentInvocation.withValue(invocation, function() {\n            return endpoint.action.call(endpointContext);\n          });\n        } else {\n          return {\n            statusCode: 403,\n            body: {\n              status: 'error',\n              message: 'Bad X-Space-Id, Only admins of paid space can call this api.'\n            }\n          };\n        }\n      } else {\n        return {\n          statusCode: 403,\n          body: {\n            status: 'error',\n            message: 'You do not have permission to do this.'\n          }\n        };\n      }\n    } else {\n      return {\n        statusCode: 401,\n        body: {\n          status: 'error',\n          message: 'You must be logged in to do this.'\n        }\n      };\n    }\n  };\n\n\n  /*\n  \t\tAuthenticate the given endpoint if required\n  \n  \t\tOnce it's globally configured in the API, authentication can be required on an entire route or\n  \t\tindividual endpoints. If required on an entire endpoint, that serves as the default. If required\n  \t\tin any individual endpoints, that will override the default.\n  \n  \t\t@returns False if authentication fails, and true otherwise\n   */\n\n  Route.prototype._authAccepted = function(endpointContext, endpoint) {\n    if (endpoint.authRequired) {\n      return this._authenticate(endpointContext);\n    } else {\n      return true;\n    }\n  };\n\n\n  /*\n  \t\tVerify the request is being made by an actively logged in user\n  \n  \t\tIf verified, attach the authenticated user to the context.\n  \n  \t\t@returns {Boolean} True if the authentication was successful\n   */\n\n  Route.prototype._authenticate = function(endpointContext) {\n    var auth, userSelector;\n    auth = this.api._config.auth.user.call(endpointContext);\n    if ((auth != null ? auth.userId : void 0) && (auth != null ? auth.token : void 0) && !(auth != null ? auth.user : void 0)) {\n      userSelector = {};\n      userSelector._id = auth.userId;\n      userSelector[this.api._config.auth.token] = auth.token;\n      auth.user = Meteor.users.findOne(userSelector);\n    }\n    if (auth != null ? auth.user : void 0) {\n      endpointContext.user = auth.user;\n      endpointContext.userId = auth.user._id;\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n\n  /*\n  \t\tAuthenticate the user role if required\n  \n  \t\tMust be called after _authAccepted().\n  \n  \t\t@returns True if the authenticated user belongs to <i>any</i> of the acceptable roles on the\n  \t\t\t\t\t\t endpoint\n   */\n\n  Route.prototype._spaceAccepted = function(endpointContext, endpoint) {\n    var auth, space, space_users_count;\n    if (endpoint.spaceRequired) {\n      auth = this.api._config.auth.user.call(endpointContext);\n      if (auth != null ? auth.spaceId : void 0) {\n        space_users_count = db.space_users.find({\n          user: auth.userId,\n          space: auth.spaceId\n        }).count();\n        if (space_users_count) {\n          space = db.spaces.findOne(auth.spaceId);\n          if (space && Steedos.hasFeature('paid', space._id) && _.indexOf(space.admins, auth.userId) >= 0) {\n            endpointContext.spaceId = auth.spaceId;\n            return true;\n          }\n        }\n      }\n      endpointContext.spaceId = \"bad\";\n      return false;\n    }\n    return true;\n  };\n\n\n  /*\n  \t\tAuthenticate the user role if required\n  \n  \t\tMust be called after _authAccepted().\n  \n  \t\t@returns True if the authenticated user belongs to <i>any</i> of the acceptable roles on the\n  \t\t\t\t\t\t endpoint\n   */\n\n  Route.prototype._roleAccepted = function(endpointContext, endpoint) {\n    if (endpoint.roleRequired) {\n      if (_.isEmpty(_.intersection(endpoint.roleRequired, endpointContext.user.roles))) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n\n  /*\n  \t\tRespond to an HTTP request\n   */\n\n  Route.prototype._respond = function(response, body, statusCode, headers) {\n    var defaultHeaders, delayInMilliseconds, minimumDelayInMilliseconds, randomMultiplierBetweenOneAndTwo, sendResponse;\n    if (statusCode == null) {\n      statusCode = 200;\n    }\n    if (headers == null) {\n      headers = {};\n    }\n    defaultHeaders = this._lowerCaseKeys(this.api._config.defaultHeaders);\n    headers = this._lowerCaseKeys(headers);\n    headers = _.extend(defaultHeaders, headers);\n    if (headers['content-type'].match(/json|javascript/) !== null) {\n      if (this.api._config.prettyJson) {\n        body = JSON.stringify(body, void 0, 2);\n      } else {\n        body = JSON.stringify(body);\n      }\n    }\n    sendResponse = function() {\n      response.writeHead(statusCode, headers);\n      response.write(body);\n      return response.end();\n    };\n    if (statusCode === 401 || statusCode === 403) {\n      minimumDelayInMilliseconds = 500;\n      randomMultiplierBetweenOneAndTwo = 1 + Math.random();\n      delayInMilliseconds = minimumDelayInMilliseconds * randomMultiplierBetweenOneAndTwo;\n      return Meteor.setTimeout(sendResponse, delayInMilliseconds);\n    } else {\n      return sendResponse();\n    }\n  };\n\n\n  /*\n  \t\tReturn the object with all of the keys converted to lowercase\n   */\n\n  Route.prototype._lowerCaseKeys = function(object) {\n    return _.chain(object).pairs().map(function(attr) {\n      return [attr[0].toLowerCase(), attr[1]];\n    }).object().value();\n  };\n\n  return Route;\n\n})();\n","basicAuth = require('basic-auth')\nCookies = require(\"cookies\")\n\nclass @OdataRestivus\n\n\tconstructor: (options) ->\n\t\t@_routes = []\n\t\t@_config =\n\t\t\tpaths: []\n\t\t\tuseDefaultAuth: false\n\t\t\tapiPath: 'api/'\n\t\t\tversion: null\n\t\t\tprettyJson: false\n\t\t\tauth:\n\t\t\t\ttoken: 'services.resume.loginTokens.hashedToken'\n\t\t\t\tuser: ->\n\t\t\t\t\tcookies = new Cookies( @request, @response )\n\t\t\t\t\tuserId = @request.headers['x-user-id'] || cookies.get(\"X-User-Id\")\n\t\t\t\t\tauthToken = @request.headers['x-auth-token'] || cookies.get(\"X-Auth-Token\")\n\t\t\t\t\tspaceId = @request.headers['x-space-id'] || @urlParams['spaceId']\n\t\t\t\t\tif authToken\n\t\t\t\t\t\ttoken = Accounts._hashLoginToken authToken\n\t\t\t\t\tif @request.userId\n\t\t\t\t\t\t_user = db.users.findOne({_id: @request.userId})\n\t\t\t\t\t\tuser: _user\n\t\t\t\t\t\tuserId: userId\n\t\t\t\t\t\tspaceId: spaceId\n\t\t\t\t\t\ttoken: token\n\t\t\t\t\telse\n\t\t\t\t\t\tuserId: userId\n\t\t\t\t\t\tspaceId: spaceId\n\t\t\t\t\t\ttoken: token\n\t\t\tdefaultHeaders:\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\tenableCors: true\n\n\t\t# Configure API with the given options\n\t\t_.extend @_config, options\n\n\t\tif @_config.enableCors\n\t\t\tcorsHeaders =\n\t\t\t\t'Access-Control-Allow-Origin': '*'\n\t\t\t\t'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, OData-Version'\n\n\t\t\tif @_config.useDefaultAuth\n\t\t\t\tcorsHeaders['Access-Control-Allow-Headers'] += ', X-User-Id, X-Auth-Token, X-Space-Id'\n\n\t\t\t# Set default header to enable CORS if configured\n\t\t\t_.extend @_config.defaultHeaders, corsHeaders\n\n\t\t\tif not @_config.defaultOptionsEndpoint\n\t\t\t\t@_config.defaultOptionsEndpoint = ->\n\t\t\t\t\t@response.writeHead 200, corsHeaders\n\t\t\t\t\t@done()\n\n\t\t# Normalize the API path\n\t\tif @_config.apiPath[0] is '/'\n\t\t\t@_config.apiPath = @_config.apiPath.slice 1\n\t\tif _.last(@_config.apiPath) isnt '/'\n\t\t\t@_config.apiPath = @_config.apiPath + '/'\n\n\t\t# URL path versioning is the only type of API versioning currently available, so if a version is\n\t\t# provided, append it to the base path of the API\n\t\tif @_config.version\n\t\t\t@_config.apiPath += @_config.version + '/'\n\n\t\t# Add default login and logout endpoints if auth is configured\n\t\tif @_config.useDefaultAuth\n\t\t\t@_initAuth()\n\t\telse if @_config.useAuth\n\t\t\t@_initAuth()\n\t\t\tconsole.warn 'Warning: useAuth API config option will be removed in Restivus v1.0 ' +\n\t\t\t\t\t'\\n    Use the useDefaultAuth option instead'\n\n\t\treturn this\n\n\n\t###*\n\t\tAdd endpoints for the given HTTP methods at the given path\n\n\t\t@param path {String} The extended URL path (will be appended to base path of the API)\n\t\t@param options {Object} Route configuration options\n\t\t@param options.authRequired {Boolean} The default auth requirement for each endpoint on the route\n\t\t@param options.roleRequired {String or String[]} The default role required for each endpoint on the route\n\t\t@param endpoints {Object} A set of endpoints available on the new route (get, post, put, patch, delete, options)\n\t\t@param endpoints.<method> {Function or Object} If a function is provided, all default route\n\t\t\t\tconfiguration options will be applied to the endpoint. Otherwise an object with an `action`\n\t\t\t\tand all other route config options available. An `action` must be provided with the object.\n\t###\n\taddRoute: (path, options, endpoints) ->\n\t\t# Create a new route and add it to our list of existing routes\n\t\troute = new share.Route(this, path, options, endpoints)\n\t\t@_routes.push(route)\n\n\t\troute.addToApi()\n\n\t\treturn this\n\n\n\t###*\n\t\tGenerate routes for the Meteor Collection with the given name\n\t###\n\taddCollection: (collection, options={}) ->\n\t\tmethods = ['get', 'post', 'put', 'delete', 'getAll']\n\t\tmethodsOnCollection = ['post', 'getAll']\n\n\t\t# Grab the set of endpoints\n\t\tif collection is Meteor.users\n\t\t\tcollectionEndpoints = @_userCollectionEndpoints\n\t\telse\n\t\t\tcollectionEndpoints = @_collectionEndpoints\n\n\t\t# Flatten the options and set defaults if necessary\n\t\tendpointsAwaitingConfiguration = options.endpoints or {}\n\t\trouteOptions = options.routeOptions or {}\n\t\texcludedEndpoints = options.excludedEndpoints or []\n\t\t# Use collection name as default path\n\t\tpath = options.path or collection._name\n\n\t\t# Separate the requested endpoints by the route they belong to (one for operating on the entire\n\t\t# collection and one for operating on a single entity within the collection)\n\t\tcollectionRouteEndpoints = {}\n\t\tentityRouteEndpoints = {}\n\t\tif _.isEmpty(endpointsAwaitingConfiguration) and _.isEmpty(excludedEndpoints)\n\t\t\t# Generate all endpoints on this collection\n\t\t\t_.each methods, (method) ->\n\t\t\t\t# Partition the endpoints into their respective routes\n\t\t\t\tif method in methodsOnCollection\n\t\t\t\t\t_.extend collectionRouteEndpoints, collectionEndpoints[method].call(this, collection)\n\t\t\t\telse _.extend entityRouteEndpoints, collectionEndpoints[method].call(this, collection)\n\t\t\t\treturn\n\t\t\t, this\n\t\telse\n\t\t\t# Generate any endpoints that haven't been explicitly excluded\n\t\t\t_.each methods, (method) ->\n\t\t\t\tif method not in excludedEndpoints and endpointsAwaitingConfiguration[method] isnt false\n\t\t\t\t\t# Configure endpoint and map to it's http method\n\t\t\t\t\t# TODO: Consider predefining a map of methods to their http method type (e.g., getAll: get)\n\t\t\t\t\tendpointOptions = endpointsAwaitingConfiguration[method]\n\t\t\t\t\tconfiguredEndpoint = {}\n\t\t\t\t\t_.each collectionEndpoints[method].call(this, collection), (action, methodType) ->\n\t\t\t\t\t\tconfiguredEndpoint[methodType] =\n\t\t\t\t\t\t\t_.chain action\n\t\t\t\t\t\t\t.clone()\n\t\t\t\t\t\t\t.extend endpointOptions\n\t\t\t\t\t\t\t.value()\n\t\t\t\t\t# Partition the endpoints into their respective routes\n\t\t\t\t\tif method in methodsOnCollection\n\t\t\t\t\t\t_.extend collectionRouteEndpoints, configuredEndpoint\n\t\t\t\t\telse _.extend entityRouteEndpoints, configuredEndpoint\n\t\t\t\t\treturn\n\t\t\t, this\n\n\t\t# Add the routes to the API\n\t\t@addRoute path, routeOptions, collectionRouteEndpoints\n\t\t@addRoute \"#{path}/:id\", routeOptions, entityRouteEndpoints\n\n\t\treturn this\n\n\n\t###*\n\t\tA set of endpoints that can be applied to a Collection Route\n\t###\n\t_collectionEndpoints:\n\t\tget: (collection) ->\n\t\t\tget:\n\t\t\t\taction: ->\n\t\t\t\t\tselector = {_id: @urlParams.id}\n\t\t\t\t\tif this.spaceId\n\t\t\t\t\t\tselector.space = this.spaceId\n\t\t\t\t\tentity = collection.findOne selector\n\t\t\t\t\tif entity\n\t\t\t\t\t\t{status: 'success', data: entity}\n\t\t\t\t\telse\n\t\t\t\t\t\tstatusCode: 404\n\t\t\t\t\t\tbody: {status: 'fail', message: 'Item not found'}\n\t\tput: (collection) ->\n\t\t\tput:\n\t\t\t\taction: ->\n\t\t\t\t\tselector = {_id: @urlParams.id}\n\t\t\t\t\tif this.spaceId\n\t\t\t\t\t\tselector.space = this.spaceId\n\t\t\t\t\tentityIsUpdated = collection.update selector, $set: @bodyParams\n\t\t\t\t\tif entityIsUpdated\n\t\t\t\t\t\tentity = collection.findOne @urlParams.id\n\t\t\t\t\t\t{status: 'success', data: entity}\n\t\t\t\t\telse\n\t\t\t\t\t\tstatusCode: 404\n\t\t\t\t\t\tbody: {status: 'fail', message: 'Item not found'}\n\t\tdelete: (collection) ->\n\t\t\tdelete:\n\t\t\t\taction: ->\n\t\t\t\t\tselector = {_id: @urlParams.id}\n\t\t\t\t\tif this.spaceId\n\t\t\t\t\t\tselector.space = this.spaceId\n\t\t\t\t\tif collection.remove selector\n\t\t\t\t\t\t{status: 'success', data: message: 'Item removed'}\n\t\t\t\t\telse\n\t\t\t\t\t\tstatusCode: 404\n\t\t\t\t\t\tbody: {status: 'fail', message: 'Item not found'}\n\t\tpost: (collection) ->\n\t\t\tpost:\n\t\t\t\taction: ->\n\t\t\t\t\tif this.spaceId\n\t\t\t\t\t\t@bodyParams.space = this.spaceId\n\t\t\t\t\tentityId = collection.insert @bodyParams\n\t\t\t\t\tentity = collection.findOne entityId\n\t\t\t\t\tif entity\n\t\t\t\t\t\tstatusCode: 201\n\t\t\t\t\t\tbody: {status: 'success', data: entity}\n\t\t\t\t\telse\n\t\t\t\t\t\tstatusCode: 400\n\t\t\t\t\t\tbody: {status: 'fail', message: 'No item added'}\n\t\tgetAll: (collection) ->\n\t\t\tget:\n\t\t\t\taction: ->\n\t\t\t\t\tselector = {}\n\t\t\t\t\tif this.spaceId\n\t\t\t\t\t\tselector.space = this.spaceId\n\t\t\t\t\tentities = collection.find(selector).fetch()\n\t\t\t\t\tif entities\n\t\t\t\t\t\t{status: 'success', data: entities}\n\t\t\t\t\telse\n\t\t\t\t\t\tstatusCode: 404\n\t\t\t\t\t\tbody: {status: 'fail', message: 'Unable to retrieve items from collection'}\n\n\n\t###*\n\t\tA set of endpoints that can be applied to a Meteor.users Collection Route\n\t###\n\t_userCollectionEndpoints:\n\t\tget: (collection) ->\n\t\t\tget:\n\t\t\t\taction: ->\n\t\t\t\t\tentity = collection.findOne @urlParams.id, fields: profile: 1\n\t\t\t\t\tif entity\n\t\t\t\t\t\t{status: 'success', data: entity}\n\t\t\t\t\telse\n\t\t\t\t\t\tstatusCode: 404\n\t\t\t\t\t\tbody: {status: 'fail', message: 'User not found'}\n\t\tput: (collection) ->\n\t\t\tput:\n\t\t\t\taction: ->\n\t\t\t\t\tentityIsUpdated = collection.update @urlParams.id, $set: profile: @bodyParams\n\t\t\t\t\tif entityIsUpdated\n\t\t\t\t\t\tentity = collection.findOne @urlParams.id, fields: profile: 1\n\t\t\t\t\t\t{status: \"success\", data: entity}\n\t\t\t\t\telse\n\t\t\t\t\t\tstatusCode: 404\n\t\t\t\t\t\tbody: {status: 'fail', message: 'User not found'}\n\t\tdelete: (collection) ->\n\t\t\tdelete:\n\t\t\t\taction: ->\n\t\t\t\t\tif collection.remove @urlParams.id\n\t\t\t\t\t\t{status: 'success', data: message: 'User removed'}\n\t\t\t\t\telse\n\t\t\t\t\t\tstatusCode: 404\n\t\t\t\t\t\tbody: {status: 'fail', message: 'User not found'}\n\t\tpost: (collection) ->\n\t\t\tpost:\n\t\t\t\taction: ->\n\t\t\t\t\t# Create a new user account\n\t\t\t\t\tentityId = Accounts.createUser @bodyParams\n\t\t\t\t\tentity = collection.findOne entityId, fields: profile: 1\n\t\t\t\t\tif entity\n\t\t\t\t\t\tstatusCode: 201\n\t\t\t\t\t\tbody: {status: 'success', data: entity}\n\t\t\t\t\telse\n\t\t\t\t\t\tstatusCode: 400\n\t\t\t\t\t\t{status: 'fail', message: 'No user added'}\n\t\tgetAll: (collection) ->\n\t\t\tget:\n\t\t\t\taction: ->\n\t\t\t\t\tentities = collection.find({}, fields: profile: 1).fetch()\n\t\t\t\t\tif entities\n\t\t\t\t\t\t{status: 'success', data: entities}\n\t\t\t\t\telse\n\t\t\t\t\t\tstatusCode: 404\n\t\t\t\t\t\tbody: {status: 'fail', message: 'Unable to retrieve users'}\n\n\n\t###\n\t\tAdd /login and /logout endpoints to the API\n\t###\n\t_initAuth: ->\n\t\tself = this\n\t\t###\n\t\t\tAdd a login endpoint to the API\n\n\t\t\tAfter the user is logged in, the onLoggedIn hook is called (see Restfully.configure() for\n\t\t\tadding hook).\n\t\t###\n\t\t@addRoute 'login', {authRequired: false},\n\t\t\tpost: ->\n\t\t\t\t# Grab the username or email that the user is logging in with\n\t\t\t\tuser = {}\n\t\t\t\tif @bodyParams.user\n\t\t\t\t\tif @bodyParams.user.indexOf('@') is -1\n\t\t\t\t\t\tuser.username = @bodyParams.user\n\t\t\t\t\telse\n\t\t\t\t\t\tuser.email = @bodyParams.user\n\t\t\t\telse if @bodyParams.username\n\t\t\t\t\tuser.username = @bodyParams.username\n\t\t\t\telse if @bodyParams.email\n\t\t\t\t\tuser.email = @bodyParams.email\n\n\t\t\t\t# Try to log the user into the user's account (if successful we'll get an auth token back)\n\t\t\t\ttry\n\t\t\t\t\tauth = Auth.loginWithPassword user, @bodyParams.password\n\t\t\t\tcatch e\n\t\t\t\t\tconsole.error e\n\t\t\t\t\treturn {} =\n\t\t\t\t\t\tstatusCode: e.error\n\t\t\t\t\t\tbody: status: 'error', message: e.reason\n\n\t\t\t\t# Get the authenticated user\n\t\t\t\t# TODO: Consider returning the user in Auth.loginWithPassword(), instead of fetching it again here\n\t\t\t\tif auth.userId and auth.authToken\n\t\t\t\t\tsearchQuery = {}\n\t\t\t\t\tsearchQuery[self._config.auth.token] = Accounts._hashLoginToken auth.authToken\n\t\t\t\t\t@user = Meteor.users.findOne\n\t\t\t\t\t\t'_id': auth.userId\n\t\t\t\t\t\tsearchQuery\n\t\t\t\t\t@userId = @user?._id\n\n\t\t\t\tresponse = {status: 'success', data: auth}\n\n\t\t\t\t# Call the login hook with the authenticated user attached\n\t\t\t\textraData = self._config.onLoggedIn?.call(this)\n\t\t\t\tif extraData?\n\t\t\t\t\t_.extend(response.data, {extra: extraData})\n\n\t\t\t\tresponse\n\n\t\tlogout = ->\n\t\t\t# Remove the given auth token from the user's account\n\t\t\tauthToken = @request.headers['x-auth-token']\n\t\t\thashedToken = Accounts._hashLoginToken authToken\n\t\t\ttokenLocation = self._config.auth.token\n\t\t\tindex = tokenLocation.lastIndexOf '.'\n\t\t\ttokenPath = tokenLocation.substring 0, index\n\t\t\ttokenFieldName = tokenLocation.substring index + 1\n\t\t\ttokenToRemove = {}\n\t\t\ttokenToRemove[tokenFieldName] = hashedToken\n\t\t\ttokenRemovalQuery = {}\n\t\t\ttokenRemovalQuery[tokenPath] = tokenToRemove\n\t\t\tMeteor.users.update @user._id, {$pull: tokenRemovalQuery}\n\n\t\t\tresponse = {status: 'success', data: {message: 'You\\'ve been logged out!'}}\n\n\t\t\t# Call the logout hook with the authenticated user attached\n\t\t\textraData = self._config.onLoggedOut?.call(this)\n\t\t\tif extraData?\n\t\t\t\t_.extend(response.data, {extra: extraData})\n\n\t\t\tresponse\n\n\t\t###\n\t\t\tAdd a logout endpoint to the API\n\n\t\t\tAfter the user is logged out, the onLoggedOut hook is called (see Restfully.configure() for\n\t\t\tadding hook).\n\t\t###\n\t\t@addRoute 'logout', {authRequired: true},\n\t\t\tget: ->\n\t\t\t\tconsole.warn \"Warning: Default logout via GET will be removed in Restivus v1.0. Use POST instead.\"\n\t\t\t\tconsole.warn \"    See https://github.com/kahmali/meteor-restivus/issues/100\"\n\t\t\t\treturn logout.call(this)\n\t\t\tpost: logout\n\nOdataRestivus = @OdataRestivus\n","var Cookies, OdataRestivus, basicAuth,\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nbasicAuth = require('basic-auth');\n\nCookies = require(\"cookies\");\n\nthis.OdataRestivus = (function() {\n  function OdataRestivus(options) {\n    var corsHeaders;\n    this._routes = [];\n    this._config = {\n      paths: [],\n      useDefaultAuth: false,\n      apiPath: 'api/',\n      version: null,\n      prettyJson: false,\n      auth: {\n        token: 'services.resume.loginTokens.hashedToken',\n        user: function() {\n          var _user, authToken, cookies, spaceId, token, userId;\n          cookies = new Cookies(this.request, this.response);\n          userId = this.request.headers['x-user-id'] || cookies.get(\"X-User-Id\");\n          authToken = this.request.headers['x-auth-token'] || cookies.get(\"X-Auth-Token\");\n          spaceId = this.request.headers['x-space-id'] || this.urlParams['spaceId'];\n          if (authToken) {\n            token = Accounts._hashLoginToken(authToken);\n          }\n          if (this.request.userId) {\n            _user = db.users.findOne({\n              _id: this.request.userId\n            });\n            return {\n              user: _user,\n              userId: userId,\n              spaceId: spaceId,\n              token: token\n            };\n          } else {\n            return {\n              userId: userId,\n              spaceId: spaceId,\n              token: token\n            };\n          }\n        }\n      },\n      defaultHeaders: {\n        'Content-Type': 'application/json'\n      },\n      enableCors: true\n    };\n    _.extend(this._config, options);\n    if (this._config.enableCors) {\n      corsHeaders = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, OData-Version'\n      };\n      if (this._config.useDefaultAuth) {\n        corsHeaders['Access-Control-Allow-Headers'] += ', X-User-Id, X-Auth-Token, X-Space-Id';\n      }\n      _.extend(this._config.defaultHeaders, corsHeaders);\n      if (!this._config.defaultOptionsEndpoint) {\n        this._config.defaultOptionsEndpoint = function() {\n          this.response.writeHead(200, corsHeaders);\n          return this.done();\n        };\n      }\n    }\n    if (this._config.apiPath[0] === '/') {\n      this._config.apiPath = this._config.apiPath.slice(1);\n    }\n    if (_.last(this._config.apiPath) !== '/') {\n      this._config.apiPath = this._config.apiPath + '/';\n    }\n    if (this._config.version) {\n      this._config.apiPath += this._config.version + '/';\n    }\n    if (this._config.useDefaultAuth) {\n      this._initAuth();\n    } else if (this._config.useAuth) {\n      this._initAuth();\n      console.warn('Warning: useAuth API config option will be removed in Restivus v1.0 ' + '\\n    Use the useDefaultAuth option instead');\n    }\n    return this;\n  }\n\n\n  /**\n  \t\tAdd endpoints for the given HTTP methods at the given path\n  \n  \t\t@param path {String} The extended URL path (will be appended to base path of the API)\n  \t\t@param options {Object} Route configuration options\n  \t\t@param options.authRequired {Boolean} The default auth requirement for each endpoint on the route\n  \t\t@param options.roleRequired {String or String[]} The default role required for each endpoint on the route\n  \t\t@param endpoints {Object} A set of endpoints available on the new route (get, post, put, patch, delete, options)\n  \t\t@param endpoints.<method> {Function or Object} If a function is provided, all default route\n  \t\t\t\tconfiguration options will be applied to the endpoint. Otherwise an object with an `action`\n  \t\t\t\tand all other route config options available. An `action` must be provided with the object.\n   */\n\n  OdataRestivus.prototype.addRoute = function(path, options, endpoints) {\n    var route;\n    route = new share.Route(this, path, options, endpoints);\n    this._routes.push(route);\n    route.addToApi();\n    return this;\n  };\n\n\n  /**\n  \t\tGenerate routes for the Meteor Collection with the given name\n   */\n\n  OdataRestivus.prototype.addCollection = function(collection, options) {\n    var collectionEndpoints, collectionRouteEndpoints, endpointsAwaitingConfiguration, entityRouteEndpoints, excludedEndpoints, methods, methodsOnCollection, path, routeOptions;\n    if (options == null) {\n      options = {};\n    }\n    methods = ['get', 'post', 'put', 'delete', 'getAll'];\n    methodsOnCollection = ['post', 'getAll'];\n    if (collection === Meteor.users) {\n      collectionEndpoints = this._userCollectionEndpoints;\n    } else {\n      collectionEndpoints = this._collectionEndpoints;\n    }\n    endpointsAwaitingConfiguration = options.endpoints || {};\n    routeOptions = options.routeOptions || {};\n    excludedEndpoints = options.excludedEndpoints || [];\n    path = options.path || collection._name;\n    collectionRouteEndpoints = {};\n    entityRouteEndpoints = {};\n    if (_.isEmpty(endpointsAwaitingConfiguration) && _.isEmpty(excludedEndpoints)) {\n      _.each(methods, function(method) {\n        if (indexOf.call(methodsOnCollection, method) >= 0) {\n          _.extend(collectionRouteEndpoints, collectionEndpoints[method].call(this, collection));\n        } else {\n          _.extend(entityRouteEndpoints, collectionEndpoints[method].call(this, collection));\n        }\n      }, this);\n    } else {\n      _.each(methods, function(method) {\n        var configuredEndpoint, endpointOptions;\n        if (indexOf.call(excludedEndpoints, method) < 0 && endpointsAwaitingConfiguration[method] !== false) {\n          endpointOptions = endpointsAwaitingConfiguration[method];\n          configuredEndpoint = {};\n          _.each(collectionEndpoints[method].call(this, collection), function(action, methodType) {\n            return configuredEndpoint[methodType] = _.chain(action).clone().extend(endpointOptions).value();\n          });\n          if (indexOf.call(methodsOnCollection, method) >= 0) {\n            _.extend(collectionRouteEndpoints, configuredEndpoint);\n          } else {\n            _.extend(entityRouteEndpoints, configuredEndpoint);\n          }\n        }\n      }, this);\n    }\n    this.addRoute(path, routeOptions, collectionRouteEndpoints);\n    this.addRoute(path + \"/:id\", routeOptions, entityRouteEndpoints);\n    return this;\n  };\n\n\n  /**\n  \t\tA set of endpoints that can be applied to a Collection Route\n   */\n\n  OdataRestivus.prototype._collectionEndpoints = {\n    get: function(collection) {\n      return {\n        get: {\n          action: function() {\n            var entity, selector;\n            selector = {\n              _id: this.urlParams.id\n            };\n            if (this.spaceId) {\n              selector.space = this.spaceId;\n            }\n            entity = collection.findOne(selector);\n            if (entity) {\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    put: function(collection) {\n      return {\n        put: {\n          action: function() {\n            var entity, entityIsUpdated, selector;\n            selector = {\n              _id: this.urlParams.id\n            };\n            if (this.spaceId) {\n              selector.space = this.spaceId;\n            }\n            entityIsUpdated = collection.update(selector, {\n              $set: this.bodyParams\n            });\n            if (entityIsUpdated) {\n              entity = collection.findOne(this.urlParams.id);\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    \"delete\": function(collection) {\n      return {\n        \"delete\": {\n          action: function() {\n            var selector;\n            selector = {\n              _id: this.urlParams.id\n            };\n            if (this.spaceId) {\n              selector.space = this.spaceId;\n            }\n            if (collection.remove(selector)) {\n              return {\n                status: 'success',\n                data: {\n                  message: 'Item removed'\n                }\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    post: function(collection) {\n      return {\n        post: {\n          action: function() {\n            var entity, entityId;\n            if (this.spaceId) {\n              this.bodyParams.space = this.spaceId;\n            }\n            entityId = collection.insert(this.bodyParams);\n            entity = collection.findOne(entityId);\n            if (entity) {\n              return {\n                statusCode: 201,\n                body: {\n                  status: 'success',\n                  data: entity\n                }\n              };\n            } else {\n              return {\n                statusCode: 400,\n                body: {\n                  status: 'fail',\n                  message: 'No item added'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    getAll: function(collection) {\n      return {\n        get: {\n          action: function() {\n            var entities, selector;\n            selector = {};\n            if (this.spaceId) {\n              selector.space = this.spaceId;\n            }\n            entities = collection.find(selector).fetch();\n            if (entities) {\n              return {\n                status: 'success',\n                data: entities\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Unable to retrieve items from collection'\n                }\n              };\n            }\n          }\n        }\n      };\n    }\n  };\n\n\n  /**\n  \t\tA set of endpoints that can be applied to a Meteor.users Collection Route\n   */\n\n  OdataRestivus.prototype._userCollectionEndpoints = {\n    get: function(collection) {\n      return {\n        get: {\n          action: function() {\n            var entity;\n            entity = collection.findOne(this.urlParams.id, {\n              fields: {\n                profile: 1\n              }\n            });\n            if (entity) {\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'User not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    put: function(collection) {\n      return {\n        put: {\n          action: function() {\n            var entity, entityIsUpdated;\n            entityIsUpdated = collection.update(this.urlParams.id, {\n              $set: {\n                profile: this.bodyParams\n              }\n            });\n            if (entityIsUpdated) {\n              entity = collection.findOne(this.urlParams.id, {\n                fields: {\n                  profile: 1\n                }\n              });\n              return {\n                status: \"success\",\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'User not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    \"delete\": function(collection) {\n      return {\n        \"delete\": {\n          action: function() {\n            if (collection.remove(this.urlParams.id)) {\n              return {\n                status: 'success',\n                data: {\n                  message: 'User removed'\n                }\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'User not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    post: function(collection) {\n      return {\n        post: {\n          action: function() {\n            var entity, entityId;\n            entityId = Accounts.createUser(this.bodyParams);\n            entity = collection.findOne(entityId, {\n              fields: {\n                profile: 1\n              }\n            });\n            if (entity) {\n              return {\n                statusCode: 201,\n                body: {\n                  status: 'success',\n                  data: entity\n                }\n              };\n            } else {\n              ({\n                statusCode: 400\n              });\n              return {\n                status: 'fail',\n                message: 'No user added'\n              };\n            }\n          }\n        }\n      };\n    },\n    getAll: function(collection) {\n      return {\n        get: {\n          action: function() {\n            var entities;\n            entities = collection.find({}, {\n              fields: {\n                profile: 1\n              }\n            }).fetch();\n            if (entities) {\n              return {\n                status: 'success',\n                data: entities\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Unable to retrieve users'\n                }\n              };\n            }\n          }\n        }\n      };\n    }\n  };\n\n\n  /*\n  \t\tAdd /login and /logout endpoints to the API\n   */\n\n  OdataRestivus.prototype._initAuth = function() {\n    var logout, self;\n    self = this;\n\n    /*\n    \t\t\tAdd a login endpoint to the API\n    \n    \t\t\tAfter the user is logged in, the onLoggedIn hook is called (see Restfully.configure() for\n    \t\t\tadding hook).\n     */\n    this.addRoute('login', {\n      authRequired: false\n    }, {\n      post: function() {\n        var auth, e, extraData, ref, ref1, response, searchQuery, user;\n        user = {};\n        if (this.bodyParams.user) {\n          if (this.bodyParams.user.indexOf('@') === -1) {\n            user.username = this.bodyParams.user;\n          } else {\n            user.email = this.bodyParams.user;\n          }\n        } else if (this.bodyParams.username) {\n          user.username = this.bodyParams.username;\n        } else if (this.bodyParams.email) {\n          user.email = this.bodyParams.email;\n        }\n        try {\n          auth = Auth.loginWithPassword(user, this.bodyParams.password);\n        } catch (error) {\n          e = error;\n          console.error(e);\n          return {\n            statusCode: e.error,\n            body: {\n              status: 'error',\n              message: e.reason\n            }\n          };\n        }\n        if (auth.userId && auth.authToken) {\n          searchQuery = {};\n          searchQuery[self._config.auth.token] = Accounts._hashLoginToken(auth.authToken);\n          this.user = Meteor.users.findOne({\n            '_id': auth.userId\n          }, searchQuery);\n          this.userId = (ref = this.user) != null ? ref._id : void 0;\n        }\n        response = {\n          status: 'success',\n          data: auth\n        };\n        extraData = (ref1 = self._config.onLoggedIn) != null ? ref1.call(this) : void 0;\n        if (extraData != null) {\n          _.extend(response.data, {\n            extra: extraData\n          });\n        }\n        return response;\n      }\n    });\n    logout = function() {\n      var authToken, extraData, hashedToken, index, ref, response, tokenFieldName, tokenLocation, tokenPath, tokenRemovalQuery, tokenToRemove;\n      authToken = this.request.headers['x-auth-token'];\n      hashedToken = Accounts._hashLoginToken(authToken);\n      tokenLocation = self._config.auth.token;\n      index = tokenLocation.lastIndexOf('.');\n      tokenPath = tokenLocation.substring(0, index);\n      tokenFieldName = tokenLocation.substring(index + 1);\n      tokenToRemove = {};\n      tokenToRemove[tokenFieldName] = hashedToken;\n      tokenRemovalQuery = {};\n      tokenRemovalQuery[tokenPath] = tokenToRemove;\n      Meteor.users.update(this.user._id, {\n        $pull: tokenRemovalQuery\n      });\n      response = {\n        status: 'success',\n        data: {\n          message: 'You\\'ve been logged out!'\n        }\n      };\n      extraData = (ref = self._config.onLoggedOut) != null ? ref.call(this) : void 0;\n      if (extraData != null) {\n        _.extend(response.data, {\n          extra: extraData\n        });\n      }\n      return response;\n    };\n\n    /*\n    \t\t\tAdd a logout endpoint to the API\n    \n    \t\t\tAfter the user is logged out, the onLoggedOut hook is called (see Restfully.configure() for\n    \t\t\tadding hook).\n     */\n    return this.addRoute('logout', {\n      authRequired: true\n    }, {\n      get: function() {\n        console.warn(\"Warning: Default logout via GET will be removed in Restivus v1.0. Use POST instead.\");\n        console.warn(\"    See https://github.com/kahmali/meteor-restivus/issues/100\");\n        return logout.call(this);\n      },\n      post: logout\n    });\n  };\n\n  return OdataRestivus;\n\n})();\n\nOdataRestivus = this.OdataRestivus;\n","Meteor.startup ->\n\n\tgetObjects = (spaceId, userId, object_names)->\n\t\tdata = {}\n\t\tobject_names.split(',').forEach (object_name)->\n\t\t\tobject = getObject(spaceId, userId, object_name)\n\t\t\tdata[object.name] = object\n\t\treturn data;\n\n\tgetObject = (spaceId, userId, object_name)->\n\t\tdata = _.clone(Creator.Objects[Creator.getObjectName(Creator.getObject(object_name, spaceId))])\n\t\tif !data\n\t\t\tthrow new Meteor.Error(500, \"无效的id #{object_name}\")\n\n\t\tpsetsAdmin = Creator.getCollection(\"permission_set\").findOne({space: spaceId, name: 'admin'}, {fields:{_id:1, assigned_apps:1}})\n\t\tpsetsUser = Creator.getCollection(\"permission_set\").findOne({space: spaceId, name: 'user'}, {fields:{_id:1, assigned_apps:1}})\n\t\tpsetsCurrent = Creator.getCollection(\"permission_set\").find({users: userId, space: spaceId}, {fields:{_id:1, assigned_apps:1}}).fetch()\n\t\tpsets = { psetsAdmin, psetsUser, psetsCurrent }\n\n\t\tobject_permissions = Creator.getObjectPermissions.bind(psets)(spaceId, userId, object_name)\n\n\t\tdelete data.list_views\n\t\tdelete data.permission_set\n\n\t\tif object_permissions.allowRead\n\t\t\tdata.allowRead = true\n\t\t\tdata.allowEdit = object_permissions.allowEdit\n\t\t\tdata.allowDelete = object_permissions.allowDelete\n\t\t\tdata.allowCreate = object_permissions.allowCreate\n\t\t\tdata.modifyAllRecords = object_permissions.modifyAllRecords\n\n\t\t\tfields = {}\n\t\t\t_.forEach data.fields, (field, key)->\n\t\t\t\t_field = _.clone(field)\n\n\t\t\t\tif !_field.name\n\t\t\t\t\t_field.name = key\n\n\t\t\t\t#将不可编辑的字段设置为readonly = true\n\t\t\t\tif (_.indexOf(object_permissions.uneditable_fields, _field.name) > -1)\n\t\t\t\t\t_field.readonly = true\n\n\t\t\t\t#不返回不可见字段\n\t\t\t\tif (_.indexOf(object_permissions.unreadable_fields, _field.name) < 0)\n\t\t\t\t\tfields[key] = _field\n\n\t\t\tdata.fields = fields\n\n\t\telse\n\t\t\tdata.allowRead = false\n\n\t\treturn data\n\n\tJsonRoutes.add 'get', SteedosOData.API_PATH + '/objects/:id', (req, res, next) ->\n\t\ttry\n\t\t\tuserId = Steedos.getUserIdFromAuthToken(req, res);\n\t\t\tif !userId\n\t\t\t\tthrow new Meteor.Error(500, \"No permission\")\n\n\t\t\tspaceId = req.params?.spaceId\n\t\t\tif !spaceId\n\t\t\t\tthrow new Meteor.Error(500, \"Miss spaceId\")\n\n\t\t\tobject_name = req.params?.id\n\t\t\tif !object_name\n\t\t\t\tthrow new Meteor.Error(500, \"Miss id\")\n\n\t\t\t_obj = Creator.getCollection(\"objects\").findOne({_id: object_name})\n\n\t\t\tif _obj && _obj.name\n\t\t\t\tobject_name = _obj.name\n\n\t\t\tif object_name.split(',').length > 1\n\t\t\t\tdata = getObjects(spaceId, userId, object_name)\n\t\t\telse\n\t\t\t\tdata = getObject(spaceId, userId, object_name)\n\n\t\t\tJsonRoutes.sendResult res, {\n\t\t\t\tcode: 200,\n\t\t\t\tdata: data || {}\n\t\t\t}\n\t\tcatch e\n\t\t\tconsole.error e.stack\n\t\t\tJsonRoutes.sendResult res, {\n\t\t\t\tcode: e.error || 500\n\t\t\t\tdata: {errors: e.reason || e.message}\n\t\t\t}","Meteor.startup(function() {\n  var getObject, getObjects;\n  getObjects = function(spaceId, userId, object_names) {\n    var data;\n    data = {};\n    object_names.split(',').forEach(function(object_name) {\n      var object;\n      object = getObject(spaceId, userId, object_name);\n      return data[object.name] = object;\n    });\n    return data;\n  };\n  getObject = function(spaceId, userId, object_name) {\n    var data, fields, object_permissions, psets, psetsAdmin, psetsCurrent, psetsUser;\n    data = _.clone(Creator.Objects[Creator.getObjectName(Creator.getObject(object_name, spaceId))]);\n    if (!data) {\n      throw new Meteor.Error(500, \"无效的id \" + object_name);\n    }\n    psetsAdmin = Creator.getCollection(\"permission_set\").findOne({\n      space: spaceId,\n      name: 'admin'\n    }, {\n      fields: {\n        _id: 1,\n        assigned_apps: 1\n      }\n    });\n    psetsUser = Creator.getCollection(\"permission_set\").findOne({\n      space: spaceId,\n      name: 'user'\n    }, {\n      fields: {\n        _id: 1,\n        assigned_apps: 1\n      }\n    });\n    psetsCurrent = Creator.getCollection(\"permission_set\").find({\n      users: userId,\n      space: spaceId\n    }, {\n      fields: {\n        _id: 1,\n        assigned_apps: 1\n      }\n    }).fetch();\n    psets = {\n      psetsAdmin: psetsAdmin,\n      psetsUser: psetsUser,\n      psetsCurrent: psetsCurrent\n    };\n    object_permissions = Creator.getObjectPermissions.bind(psets)(spaceId, userId, object_name);\n    delete data.list_views;\n    delete data.permission_set;\n    if (object_permissions.allowRead) {\n      data.allowRead = true;\n      data.allowEdit = object_permissions.allowEdit;\n      data.allowDelete = object_permissions.allowDelete;\n      data.allowCreate = object_permissions.allowCreate;\n      data.modifyAllRecords = object_permissions.modifyAllRecords;\n      fields = {};\n      _.forEach(data.fields, function(field, key) {\n        var _field;\n        _field = _.clone(field);\n        if (!_field.name) {\n          _field.name = key;\n        }\n        if (_.indexOf(object_permissions.uneditable_fields, _field.name) > -1) {\n          _field.readonly = true;\n        }\n        if (_.indexOf(object_permissions.unreadable_fields, _field.name) < 0) {\n          return fields[key] = _field;\n        }\n      });\n      data.fields = fields;\n    } else {\n      data.allowRead = false;\n    }\n    return data;\n  };\n  return JsonRoutes.add('get', SteedosOData.API_PATH + '/objects/:id', function(req, res, next) {\n    var _obj, data, e, object_name, ref, ref1, spaceId, userId;\n    try {\n      userId = Steedos.getUserIdFromAuthToken(req, res);\n      if (!userId) {\n        throw new Meteor.Error(500, \"No permission\");\n      }\n      spaceId = (ref = req.params) != null ? ref.spaceId : void 0;\n      if (!spaceId) {\n        throw new Meteor.Error(500, \"Miss spaceId\");\n      }\n      object_name = (ref1 = req.params) != null ? ref1.id : void 0;\n      if (!object_name) {\n        throw new Meteor.Error(500, \"Miss id\");\n      }\n      _obj = Creator.getCollection(\"objects\").findOne({\n        _id: object_name\n      });\n      if (_obj && _obj.name) {\n        object_name = _obj.name;\n      }\n      if (object_name.split(',').length > 1) {\n        data = getObjects(spaceId, userId, object_name);\n      } else {\n        data = getObject(spaceId, userId, object_name);\n      }\n      return JsonRoutes.sendResult(res, {\n        code: 200,\n        data: data || {}\n      });\n    } catch (error) {\n      e = error;\n      console.error(e.stack);\n      return JsonRoutes.sendResult(res, {\n        code: e.error || 500,\n        data: {\n          errors: e.reason || e.message\n        }\n      });\n    }\n  });\n});\n","Meteor.startup ->\n\tMeteorODataRouter = require('@steedos/core').MeteorODataRouter;\n\tODataRouter = require('@steedos/core').ODataRouter\n\texpress = require('express');\n\tapp = express();\n\tapp.use('/api/odata/v4', MeteorODataRouter);\n\tMeteorODataAPIV4Router = require('@steedos/core').MeteorODataAPIV4Router;\n\tif MeteorODataAPIV4Router\n\t\tapp.use('/api/v4', MeteorODataAPIV4Router)\n\tWebApp.connectHandlers.use(app);\n\t_.each Creator.steedosSchema.getDataSources(), (datasource, name)->\n\t\tif(name != 'default')\n\t\t\totherApp = express();\n\t\t\totherApp.use(\"/api/odata/#{name}\", ODataRouter);\n\t\t\tWebApp.connectHandlers.use(otherApp);\n\n# \todataV4Mongodb = require 'odata-v4-mongodb'\n# \tquerystring = require 'querystring'\n\n# \thandleError = (e)->\n# \t\tconsole.error e.stack\n# \t\tbody = {}\n# \t\terror = {}\n# \t\terror['message'] = e.message\n# \t\tstatusCode = 500\n# \t\tif e.error and _.isNumber(e.error)\n# \t\t\tstatusCode = e.error\n# \t\terror['code'] = statusCode\n# \t\terror['error'] = statusCode\n# \t\terror['details'] = e.details\n# \t\terror['reason'] = e.reason\n# \t\tbody['error'] = error\n# \t\treturn {\n# \t\t\tstatusCode: statusCode\n# \t\t\tbody:body\n# \t\t}\n\n# \tvisitorParser = (visitor)->\n# \t\tparsedOpt = {}\n# \t\tif visitor.projection\n# \t\t\tparsedOpt.fields = visitor.projection\n# \t\tif visitor.hasOwnProperty('limit')\n# \t\t\tparsedOpt.limit = visitor.limit\n\n# \t\tif visitor.hasOwnProperty('skip')\n# \t\t\tparsedOpt.skip = visitor.skip\n\n# \t\tif visitor.sort\n# \t\t\tparsedOpt.sort = visitor.sort\n\n# \t\tparsedOpt\n# \tdealWithExpand = (createQuery, entities, key, spaceId)->\n# \t\tif _.isEmpty createQuery.includes\n# \t\t\treturn\n\n# \t\tobj = Creator.getObject(key, spaceId)\n# \t\t_.each createQuery.includes, (include)->\n# \t\t\t# console.log 'include: ', include\n# \t\t\tnavigationProperty = include.navigationProperty\n# \t\t\t# console.log 'navigationProperty: ', navigationProperty\n# \t\t\tfield = obj.fields[navigationProperty]\n# \t\t\tif field and (field.type is 'lookup' or field.type is 'master_detail')\n# \t\t\t\tif _.isFunction(field.reference_to)\n# \t\t\t\t\tfield.reference_to = field.reference_to()\n# \t\t\t\tif field.reference_to\n# \t\t\t\t\tqueryOptions = visitorParser(include)\n# \t\t\t\t\tif _.isString field.reference_to\n# \t\t\t\t\t\treferenceToCollection = Creator.getCollection(field.reference_to, spaceId)\n# \t\t\t\t\t\t_ro_NAME_FIELD_KEY = Creator.getObject(field.reference_to, spaceId)?.NAME_FIELD_KEY\n# \t\t\t\t\t\t_.each entities, (entity, idx)->\n# \t\t\t\t\t\t\tif entity[navigationProperty]\n# \t\t\t\t\t\t\t\tif field.multiple\n# \t\t\t\t\t\t\t\t\toriginalData = _.clone(entity[navigationProperty])\n# \t\t\t\t\t\t\t\t\tmultiQuery = _.extend {_id: {$in: entity[navigationProperty]}}, include.query\n# \t\t\t\t\t\t\t\t\tentities[idx][navigationProperty] = referenceToCollection.find(multiQuery, queryOptions).fetch()\n# \t\t\t\t\t\t\t\t\tif !entities[idx][navigationProperty].length\n# \t\t\t\t\t\t\t\t\t\tentities[idx][navigationProperty] = originalData\n# \t\t\t\t\t\t\t\t\t#排序\n# \t\t\t\t\t\t\t\t\tentities[idx][navigationProperty] = Creator.getOrderlySetByIds(entities[idx][navigationProperty], originalData)\n# \t\t\t\t\t\t\t\t\tentities[idx][navigationProperty] = _.map entities[idx][navigationProperty], (o)->\n# \t\t\t\t\t\t\t\t\t\to['reference_to.o'] = referenceToCollection._name\n# \t\t\t\t\t\t\t\t\t\to['reference_to._o'] = field.reference_to\n# \t\t\t\t\t\t\t\t\t\to['_NAME_FIELD_VALUE'] = o[_ro_NAME_FIELD_KEY]\n# \t\t\t\t\t\t\t\t\t\treturn o\n# \t\t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\t\tsingleQuery = _.extend {_id: entity[navigationProperty]}, include.query\n\n# \t\t\t\t\t\t\t\t\t# 特殊处理在相关表中没有找到数据的情况，返回原数据\n# \t\t\t\t\t\t\t\t\tentities[idx][navigationProperty] = referenceToCollection.findOne(singleQuery, queryOptions) || entities[idx][navigationProperty]\n# \t\t\t\t\t\t\t\t\tif entities[idx][navigationProperty]\n# \t\t\t\t\t\t\t\t\t\tentities[idx][navigationProperty]['reference_to.o'] = referenceToCollection._name\n# \t\t\t\t\t\t\t\t\t\tentities[idx][navigationProperty]['reference_to._o'] = field.reference_to\n# \t\t\t\t\t\t\t\t\t\tentities[idx][navigationProperty]['_NAME_FIELD_VALUE'] = entities[idx][navigationProperty][_ro_NAME_FIELD_KEY]\n# \t\t\t\t\tif _.isArray field.reference_to\n# \t\t\t\t\t\t_.each entities, (entity, idx)->\n# \t\t\t\t\t\t\tif entity[navigationProperty]?.ids\n# \t\t\t\t\t\t\t\t_o = entity[navigationProperty].o\n# \t\t\t\t\t\t\t\t_ro_NAME_FIELD_KEY = Creator.getObject(_o, spaceId)?.NAME_FIELD_KEY\n# \t\t\t\t\t\t\t\tif queryOptions?.fields && _ro_NAME_FIELD_KEY\n# \t\t\t\t\t\t\t\t\tqueryOptions.fields[_ro_NAME_FIELD_KEY] = 1\n# \t\t\t\t\t\t\t\treferenceToCollection = Creator.getCollection(entity[navigationProperty].o, spaceId)\n# \t\t\t\t\t\t\t\tif referenceToCollection\n# \t\t\t\t\t\t\t\t\tif field.multiple\n# \t\t\t\t\t\t\t\t\t\t_ids = _.clone(entity[navigationProperty].ids)\n# \t\t\t\t\t\t\t\t\t\tmultiQuery = _.extend {_id: {$in: entity[navigationProperty].ids}}, include.query\n# \t\t\t\t\t\t\t\t\t\tentities[idx][navigationProperty] = _.map referenceToCollection.find(multiQuery, queryOptions).fetch(), (o)->\n# \t\t\t\t\t\t\t\t\t\t\to['reference_to.o'] = referenceToCollection._name\n# \t\t\t\t\t\t\t\t\t\t\to['reference_to._o'] = _o\n# \t\t\t\t\t\t\t\t\t\t\to['_NAME_FIELD_VALUE'] = o[_ro_NAME_FIELD_KEY]\n# \t\t\t\t\t\t\t\t\t\t\treturn o\n# \t\t\t\t\t\t\t\t\t\t#排序\n# \t\t\t\t\t\t\t\t\t\tentities[idx][navigationProperty] = Creator.getOrderlySetByIds(entities[idx][navigationProperty], _ids)\n# \t\t\t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\t\t\tsingleQuery = _.extend {_id: entity[navigationProperty].ids[0]}, include.query\n# \t\t\t\t\t\t\t\t\t\tentities[idx][navigationProperty] = referenceToCollection.findOne(singleQuery, queryOptions)\n# \t\t\t\t\t\t\t\t\t\tif entities[idx][navigationProperty]\n# \t\t\t\t\t\t\t\t\t\t\tentities[idx][navigationProperty]['reference_to.o'] = referenceToCollection._name\n# \t\t\t\t\t\t\t\t\t\t\tentities[idx][navigationProperty]['reference_to._o'] = _o\n# \t\t\t\t\t\t\t\t\t\t\tentities[idx][navigationProperty]['_NAME_FIELD_VALUE'] = entities[idx][navigationProperty][_ro_NAME_FIELD_KEY]\n\n# \t\t\t\telse\n# \t\t\t\t# TODO\n\n\n# \t\treturn\n\n# \tsetOdataProperty=(entities,space,key)->\n# \t\tentities_OdataProperties = []\n# \t\t_.each entities, (entity, idx)->\n# \t\t\tentity_OdataProperties = {}\n# \t\t\tid = entities[idx][\"_id\"]\n# \t\t\tentity_OdataProperties['@odata.id'] = SteedosOData.getODataNextLinkPath(space,key)+ '(\\'' + \"#{id}\" + '\\')'\n# \t\t\tentity_OdataProperties['@odata.etag'] = \"W/\\\"08D589720BBB3DB1\\\"\"\n# \t\t\tentity_OdataProperties['@odata.editLink'] = entity_OdataProperties['@odata.id']\n# \t\t\t_.extend entity_OdataProperties,entity\n# \t\t\tentities_OdataProperties.push entity_OdataProperties\n# \t\treturn entities_OdataProperties\n\n# \tsetErrorMessage = (statusCode,collection,key,action)->\n# \t\tbody = {}\n# \t\terror = {}\n# \t\tinnererror = {}\n# \t\tif statusCode == 404\n# \t\t\tif collection\n# \t\t\t\tif action == 'post'\n# \t\t\t\t\tinnererror['message'] = t(\"creator_odata_post_fail\")\n# \t\t\t\t\tinnererror['type'] = 'Microsoft.OData.Core.UriParser.ODataUnrecognizedPathException'\n# \t\t\t\t\terror['code'] = 404\n# \t\t\t\t\terror['message'] = \"creator_odata_post_fail\"\n# \t\t\t\telse\n# \t\t\t\t\tinnererror['message'] = t(\"creator_odata_record_query_fail\")\n# \t\t\t\t\tinnererror['type'] = 'Microsoft.OData.Core.UriParser.ODataUnrecognizedPathException'\n# \t\t\t\t\terror['code'] = 404\n# \t\t\t\t\terror['message'] = \"creator_odata_record_query_fail\"\n# \t\t\telse\n# \t\t\t\tinnererror['message'] = t(\"creator_odata_collection_query_fail\")+ key\n# \t\t\t\tinnererror['type'] = 'Microsoft.OData.Core.UriParser.ODataUnrecognizedPathException'\n# \t\t\t\terror['code'] = 404\n# \t\t\t\terror['message'] = \"creator_odata_collection_query_fail\"\n# \t\tif  statusCode == 401\n# \t\t\tinnererror['message'] = t(\"creator_odata_authentication_required\")\n# \t\t\tinnererror['type'] = 'Microsoft.OData.Core.UriParser.ODataUnrecognizedPathException'\n# \t\t\terror['code'] = 401\n# \t\t\terror['message'] = \"creator_odata_authentication_required\"\n# \t\tif statusCode == 403\n# \t\t\tswitch action\n# \t\t\t\twhen 'get' then innererror['message'] = t(\"creator_odata_user_access_fail\")\n# \t\t\t\twhen 'post' then innererror['message'] = t(\"creator_odata_user_create_fail\")\n# \t\t\t\twhen 'put' then innererror['message'] = t(\"creator_odata_user_update_fail\")\n# \t\t\t\twhen 'delete' then innererror['message'] = t(\"creator_odata_user_remove_fail\")\n# \t\t\tinnererror['message'] = t(\"creator_odata_user_access_fail\")\n# \t\t\tinnererror['type'] = 'Microsoft.OData.Core.UriParser.ODataUnrecognizedPathException'\n# \t\t\terror['code'] = 403\n# \t\t\terror['message'] = \"creator_odata_user_access_fail\"\n# \t\terror['innererror'] = innererror\n# \t\tbody['error'] = error\n# \t\treturn body\n\n# \tremoveInvalidMethod = (queryParams)->\n# \t\tif queryParams.$filter && queryParams.$filter.indexOf('tolower(') > -1\n# \t\t\tremoveMethod = ($1)->\n# \t\t\t\treturn $1.replace('tolower(', '').replace(')', '')\n# \t\t\tqueryParams.$filter = queryParams.$filter.replace(/tolower\\(([^\\)]+)\\)/g, removeMethod)\n\n# \tisSameCompany = (spaceId, userId, companyId, query)->\n# \t\tsu = Creator.getCollection(\"space_users\").findOne({ space: spaceId, user: userId }, { fields: { company_id: 1, company_ids: 1 } })\n# \t\tif !companyId && query\n# \t\t\tcompanyId = su.company_id\n# \t\t\tquery.company_id = { $in: su.company_ids }\n# \t\treturn su.company_ids.includes(companyId)\n\n# \t# 不返回已假删除的数据\n# \texcludeDeleted = (query)->\n# \t\tquery.is_deleted = { $ne: true }\n\n# \t# 修改、删除时，如果 doc.space = \"global\"，报错\n# \tcheckGlobalRecord = (collection, id, object)->\n# \t\tif object.enable_space_global && collection.find({ _id: id, space: 'global'}).count()\n# \t\t\tthrow new Meteor.Error(400, \"不能修改或者删除标准对象\")\n\n\n# \tSteedosOdataAPI.addRoute(':object_name', {authRequired: true, spaceRequired: false}, {\n# \t\tget: ()->\n# \t\t\ttry\n# \t\t\t\tkey = @urlParams.object_name\n# \t\t\t\tspaceId = @urlParams.spaceId\n# \t\t\t\tobject = Creator.getObject(key, spaceId)\n# \t\t\t\tif not object?.enable_api\n# \t\t\t\t\treturn {\n# \t\t\t\t\t\tstatusCode: 401\n# \t\t\t\t\t\tbody:setErrorMessage(401)\n# \t\t\t\t\t}\n# \t\t\t\tcollection = Creator.getCollection(key, spaceId)\n# \t\t\t\tif not collection\n# \t\t\t\t\treturn {\n# \t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\tbody:setErrorMessage(404,collection,key)\n# \t\t\t\t\t}\n\n# \t\t\t\tremoveInvalidMethod(@queryParams)\n# \t\t\t\tqs = decodeURIComponent(querystring.stringify(@queryParams))\n# \t\t\t\tcreateQuery = if qs then odataV4Mongodb.createQuery(qs) else odataV4Mongodb.createQuery()\n# \t\t\t\tpermissions = Creator.getObjectPermissions(spaceId, @userId, key)\n# \t\t\t\tif permissions.viewAllRecords or (permissions.viewCompanyRecords && isSameCompany(spaceId, @userId, createQuery.query.company_id, createQuery.query)) or (permissions.allowRead and @userId)\n\n# \t\t\t\t\tif key is 'cfs.files.filerecord'\n# \t\t\t\t\t\tcreateQuery.query['metadata.space'] = spaceId\n# \t\t\t\t\telse if key is 'spaces'\n# \t\t\t\t\t\tif spaceId isnt 'guest'\n# \t\t\t\t\t\t\tcreateQuery.query._id = spaceId\n# \t\t\t\t\telse\n# \t\t\t\t\t\tif spaceId isnt 'guest' and key != \"users\" and createQuery.query.space isnt 'global'\n# \t\t\t\t\t\t\tcreateQuery.query.space = spaceId\n\n# \t\t\t\t\tif Creator.isCommonSpace(spaceId)\n# \t\t\t\t\t\tif Creator.isSpaceAdmin(spaceId, @userId)\n# \t\t\t\t\t\t\tif key is 'spaces'\n# \t\t\t\t\t\t\t\tdelete createQuery.query._id\n# \t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\tdelete createQuery.query.space\n# \t\t\t\t\t\telse\n# \t\t\t\t\t\t\tuser_spaces = Creator.getCollection(\"space_users\").find({user: @userId}, {fields: {space: 1}}).fetch()\n# \t\t\t\t\t\t\tif key is 'spaces'\n# \t\t\t\t\t\t\t\t# space 对所有用户记录为只读\n# \t\t\t\t\t\t\t\tdelete createQuery.query._id\n# \t\t\t\t\t\t\t\t# createQuery.query._id = {$in: _.pluck(user_spaces, 'space')}\n# \t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\tcreateQuery.query.space = {$in: _.pluck(user_spaces, 'space')}\n\n# \t\t\t\t\tif not createQuery.sort or !_.size(createQuery.sort)\n# \t\t\t\t\t\tcreateQuery.sort = { modified: -1 }\n# \t\t\t\t\tis_enterprise = Steedos.isLegalVersion(spaceId,\"workflow.enterprise\")\n# \t\t\t\t\tis_professional = Steedos.isLegalVersion(spaceId,\"workflow.professional\")\n# \t\t\t\t\tis_standard = Steedos.isLegalVersion(spaceId,\"workflow.standard\")\n# \t\t\t\t\tif createQuery.limit\n# \t\t\t\t\t\tlimit = createQuery.limit\n# \t\t\t\t\t\tif is_enterprise and limit>100000\n# \t\t\t\t\t\t\tcreateQuery.limit = 100000\n# \t\t\t\t\t\telse if is_professional and limit>10000 and !is_enterprise\n# \t\t\t\t\t\t\tcreateQuery.limit = 10000\n# \t\t\t\t\t\telse if is_standard and limit>1000 and !is_professional and !is_enterprise\n# \t\t\t\t\t\t\tcreateQuery.limit = 1000\n# \t\t\t\t\telse\n# \t\t\t\t\t\tif is_enterprise\n# \t\t\t\t\t\t\tcreateQuery.limit = 100000\n# \t\t\t\t\t\telse if is_professional and !is_enterprise\n# \t\t\t\t\t\t\tcreateQuery.limit = 10000\n# \t\t\t\t\t\telse if is_standard and !is_enterprise and !is_professional\n# \t\t\t\t\t\t\tcreateQuery.limit = 1000\n# \t\t\t\t\tunreadable_fields = permissions.unreadable_fields || []\n# \t\t\t\t\tif createQuery.projection\n# \t\t\t\t\t\tprojection = {}\n# \t\t\t\t\t\t_.keys(createQuery.projection).forEach (key)->\n# \t\t\t\t\t\t\tif _.indexOf(unreadable_fields, key) < 0\n# \t\t\t\t\t\t\t\t#if not ((fields[key]?.type == 'lookup' or fields[key]?.type == 'master_detail') and fields[key].multiple)\n# \t\t\t\t\t\t\t\tprojection[key] = 1\n# \t\t\t\t\t\tcreateQuery.projection = projection\n# \t\t\t\t\tif not createQuery.projection or !_.size(createQuery.projection)\n# \t\t\t\t\t\treadable_fields = Creator.getFields(key, spaceId, @userId)\n# \t\t\t\t\t\tfields = Creator.getObject(key, spaceId).fields\n# \t\t\t\t\t\t_.each readable_fields, (field)->\n# \t\t\t\t\t\t\tif field.indexOf('$') < 0\n# \t\t\t\t\t\t\t\t#if fields[field]?.multiple!= true\n# \t\t\t\t\t\t\t\tcreateQuery.projection[field] = 1\n# \t\t\t\t\tif not permissions.viewAllRecords && !permissions.viewCompanyRecords\n# \t\t\t\t\t\tif object.enable_share\n# \t\t\t\t\t\t\t# 满足共享规则中的记录也要搜索出来\n# \t\t\t\t\t\t\tdelete createQuery.query.owner\n# \t\t\t\t\t\t\tshares = []\n# \t\t\t\t\t\t\torgs = Steedos.getUserOrganizations(spaceId, @userId, true)\n# \t\t\t\t\t\t\tshares.push {\"owner\": @userId}\n# \t\t\t\t\t\t\tshares.push { \"sharing.u\": @userId }\n# \t\t\t\t\t\t\tshares.push { \"sharing.o\": { $in: orgs } }\n# \t\t\t\t\t\t\tcreateQuery.query[\"$or\"] = shares\n# \t\t\t\t\t\telse\n# \t\t\t\t\t\t\tcreateQuery.query.owner = @userId\n# \t\t\t\t\tentities = []\n\n# \t\t\t\t\texcludeDeleted(createQuery.query)\n\n# \t\t\t\t\tif @queryParams.$top isnt '0'\n# \t\t\t\t\t\tentities = collection.find(createQuery.query, visitorParser(createQuery)).fetch()\n# \t\t\t\t\tscannedCount = collection.find(createQuery.query,{fields:{_id: 1}}).count()\n# \t\t\t\t\tif entities\n# \t\t\t\t\t\tdealWithExpand(createQuery, entities, key, spaceId)\n# \t\t\t\t\t\t#scannedCount = entities.length\n# \t\t\t\t\t\tbody = {}\n# \t\t\t\t\t\theaders = {}\n# \t\t\t\t\t\tbody['@odata.context'] = SteedosOData.getODataContextPath(spaceId, key)\n# \t\t\t\t\t#\tbody['@odata.nextLink'] = SteedosOData.getODataNextLinkPath(spaceId,key)+\"?%24skip=\"+ 10\n# \t\t\t\t\t\tbody['@odata.count'] = scannedCount\n# \t\t\t\t\t\tentities_OdataProperties = setOdataProperty(entities,spaceId, key)\n# \t\t\t\t\t\tbody['value'] = entities_OdataProperties\n# \t\t\t\t\t\theaders['Content-type'] = 'application/json;odata.metadata=minimal;charset=utf-8'\n# \t\t\t\t\t\theaders['OData-Version'] = SteedosOData.VERSION\n# \t\t\t\t\t\t{body: body, headers: headers}\n# \t\t\t\t\telse\n# \t\t\t\t\t\treturn{\n# \t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\tbody: setErrorMessage(404,collection,key)\n# \t\t\t\t\t\t}\n# \t\t\t\telse\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 403\n# \t\t\t\t\t\tbody: setErrorMessage(403,collection,key,\"get\")\n# \t\t\t\t\t}\n# \t\t\tcatch e\n# \t\t\t\treturn handleError e\n\n# \t\tpost: ()->\n# \t\t\ttry\n# \t\t\t\tkey = @urlParams.object_name\n# \t\t\t\tspaceId = @urlParams.spaceId\n# \t\t\t\tif not Creator.getObject(key, spaceId)?.enable_api\n# \t\t\t\t\treturn {\n# \t\t\t\t\t\tstatusCode: 401\n# \t\t\t\t\t\tbody:setErrorMessage(401)\n# \t\t\t\t}\n\n# \t\t\t\tcollection = Creator.getCollection(key, spaceId)\n# \t\t\t\tif not collection\n# \t\t\t\t\treturn {\n# \t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\tbody:setErrorMessage(404,collection,key)\n# \t\t\t\t\t}\n# \t\t\t\tpermissions = Creator.getObjectPermissions(spaceId, @userId, key)\n# \t\t\t\tif permissions.allowCreate\n# \t\t\t\t\t@bodyParams.space = spaceId\n# \t\t\t\t\tif spaceId is 'guest'\n# \t\t\t\t\t\tdelete @bodyParams.space\n# \t\t\t\t\tentityId = collection.insert @bodyParams\n# \t\t\t\t\tentity = collection.findOne entityId\n# \t\t\t\t\tentities = []\n# \t\t\t\t\tif entity\n# \t\t\t\t\t\tbody = {}\n# \t\t\t\t\t\theaders = {}\n# \t\t\t\t\t\tentities.push entity\n# \t\t\t\t\t\tbody['@odata.context'] = SteedosOData.getODataContextPath(spaceId, key) + '/$entity'\n# \t\t\t\t\t\tentity_OdataProperties = setOdataProperty(entities,spaceId, key)\n# \t\t\t\t\t\tbody['value'] = entity_OdataProperties\n# \t\t\t\t\t\theaders['Content-type'] = 'application/json;odata.metadata=minimal;charset=utf-8'\n# \t\t\t\t\t\theaders['OData-Version'] = SteedosOData.VERSION\n# \t\t\t\t\t\t{body: body, headers: headers}\n# \t\t\t\t\telse\n# \t\t\t\t\t\treturn{\n# \t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\tbody: setErrorMessage(404,collection,key,'post')\n# \t\t\t\t\t\t}\n# \t\t\t\telse\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 403\n# \t\t\t\t\t\tbody: setErrorMessage(403,collection,key,'post')\n# \t\t\t\t\t}\n# \t\t\tcatch e\n# \t\t\t\treturn handleError e\n\n# \t})\n# \tSteedosOdataAPI.addRoute(':object_name/recent', {authRequired: true, spaceRequired: false}, {\n# \t\tget:()->\n# \t\t\ttry\n# \t\t\t\tkey = @urlParams.object_name\n# \t\t\t\tobject = Creator.getObject(key, @urlParams.spaceId)\n# \t\t\t\tif not object?.enable_api\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 401\n# \t\t\t\t\t\tbody: setErrorMessage(401)\n# \t\t\t\t\t}\n# \t\t\t\tcollection = Creator.getCollection(key, @urlParams.spaceId)\n# \t\t\t\tif not collection\n# \t\t\t\t\treturn {\n# \t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\tbody: setErrorMessage(404,collection,key)\n# \t\t\t\t\t}\n# \t\t\t\tpermissions = Creator.getObjectPermissions(@urlParams.spaceId, @userId, key)\n# \t\t\t\tif permissions.allowRead\n# \t\t\t\t\trecent_view_collection = Creator.Collections[\"object_recent_viewed\"]\n# \t\t\t\t\trecent_view_selector = {\"record.o\":key,created_by:@userId}\n# \t\t\t\t\trecent_view_options = {}\n# \t\t\t\t\trecent_view_options.sort = {created: -1}\n# \t\t\t\t\trecent_view_options.fields = {record:1}\n# \t\t\t\t\trecent_view_records = recent_view_collection.find(recent_view_selector,recent_view_options).fetch()\n# \t\t\t\t\trecent_view_records_ids = _.pluck(recent_view_records,'record')\n# \t\t\t\t\trecent_view_records_ids = recent_view_records_ids.getProperty(\"ids\")\n# \t\t\t\t\trecent_view_records_ids = _.flatten(recent_view_records_ids)\n# \t\t\t\t\trecent_view_records_ids = _.uniq(recent_view_records_ids)\n# \t\t\t\t\tremoveInvalidMethod(@queryParams)\n# \t\t\t\t\tqs = decodeURIComponent(querystring.stringify(@queryParams))\n# \t\t\t\t\tcreateQuery = if qs then odataV4Mongodb.createQuery(qs) else odataV4Mongodb.createQuery()\n# \t\t\t\t\tif key is 'cfs.files.filerecord'\n# \t\t\t\t\t\tcreateQuery.query['metadata.space'] = @urlParams.spaceId\n# \t\t\t\t\telse\n# \t\t\t\t\t\tcreateQuery.query.space = @urlParams.spaceId\n# \t\t\t\t\tif not createQuery.limit\n# \t\t\t\t\t\tcreateQuery.limit = 100\n# \t\t\t\t\tif createQuery.limit and recent_view_records_ids.length>createQuery.limit\n# \t\t\t\t\t\trecent_view_records_ids = _.first(recent_view_records_ids,createQuery.limit)\n# \t\t\t\t\tcreateQuery.query._id = {$in:recent_view_records_ids}\n# \t\t\t\t\tunreadable_fields = permissions.unreadable_fields || []\n# \t\t\t\t\tif createQuery.projection\n# \t\t\t\t\t\tprojection = {}\n# \t\t\t\t\t\t_.keys(createQuery.projection).forEach (key)->\n# \t\t\t\t\t\t\tif _.indexOf(unreadable_fields, key) < 0\n# \t\t\t\t\t\t\t\t# if not ((fields[key]?.type == 'lookup' or fields[key]?.type == 'master_detail') and fields[key].multiple)\n# \t\t\t\t\t\t\t\tprojection[key] = 1\n# \t\t\t\t\t\tcreateQuery.projection = projection\n# \t\t\t\t\tif not createQuery.projection or !_.size(createQuery.projection)\n# \t\t\t\t\t\treadable_fields = Creator.getFields(key, @urlParams.spaceId, @userId)\n# \t\t\t\t\t\tfields = Creator.getObject(key, @urlParams.spaceId).fields\n# \t\t\t\t\t\t_.each readable_fields, (field)->\n# \t\t\t\t\t\t\tif field.indexOf('$') < 0\n# \t\t\t\t\t\t\t\t#if fields[field]?.multiple!= true\n# \t\t\t\t\t\t\t\tcreateQuery.projection[field] = 1\n\n# \t\t\t\t\texcludeDeleted(createQuery.query)\n\n# \t\t\t\t\tif @queryParams.$top isnt '0'\n# \t\t\t\t\t\tentities = collection.find(createQuery.query, visitorParser(createQuery)).fetch()\n# \t\t\t\t\tentities_index = []\n# \t\t\t\t\tentities_ids = _.pluck(entities,'_id')\n# \t\t\t\t\tsort_entities = []\n# \t\t\t\t\tif not createQuery.sort or !_.size(createQuery.sort)\n# \t\t\t\t\t\t_.each recent_view_records_ids ,(recent_view_records_id)->\n# \t\t\t\t\t\t\tindex = _.indexOf(entities_ids,recent_view_records_id)\n# \t\t\t\t\t\t\tif index>-1\n# \t\t\t\t\t\t\t\tsort_entities.push entities[index]\n# \t\t\t\t\telse\n# \t\t\t\t\t\tsort_entities = entities\n# \t\t\t\t\tif sort_entities\n# \t\t\t\t\t\tdealWithExpand(createQuery, sort_entities, key, @urlParams.spaceId)\n# \t\t\t\t\t\tbody = {}\n# \t\t\t\t\t\theaders = {}\n# \t\t\t\t\t\tbody['@odata.context'] = SteedosOData.getODataContextPath(@urlParams.spaceId, key)\n# \t\t\t\t\t#\tbody['@odata.nextLink'] = SteedosOData.getODataNextLinkPath(@urlParams.spaceId,key)+\"?%24skip=\"+ 10\n# \t\t\t\t\t\tbody['@odata.count'] = sort_entities.length\n# \t\t\t\t\t\tentities_OdataProperties = setOdataProperty(sort_entities,@urlParams.spaceId, key)\n# \t\t\t\t\t\tbody['value'] = entities_OdataProperties\n# \t\t\t\t\t\theaders['Content-type'] = 'application/json;odata.metadata=minimal;charset=utf-8'\n# \t\t\t\t\t\theaders['OData-Version'] = SteedosOData.VERSION\n# \t\t\t\t\t\t{body: body, headers: headers}\n# \t\t\t\t\telse\n# \t\t\t\t\t\treturn{\n# \t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\tbody: setErrorMessage(404,collection,key,'get')\n# \t\t\t\t\t\t}\n# \t\t\t\telse\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 403\n# \t\t\t\t\t\tbody: setErrorMessage(403,collection,key,'get')\n# \t\t\t\t\t}\n# \t\t\tcatch e\n# \t\t\t\treturn handleError e\n# })\n\n# \tSteedosOdataAPI.addRoute(':object_name/:_id', {authRequired: true, spaceRequired: false}, {\n# \t\tpost: ()->\n# \t\t\ttry\n# \t\t\t\tkey = @urlParams.object_name\n# \t\t\t\tif not Creator.getObject(key, @urlParams.spaceId)?.enable_api\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 401\n# \t\t\t\t\t\tbody: setErrorMessage(401)\n# \t\t\t\t\t}\n# \t\t\t\tcollection = Creator.getCollection(key, @urlParams.spaceId)\n# \t\t\t\tif not collection\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\tbody: setErrorMessage(404,collection,key)\n# \t\t\t\t\t}\n# \t\t\t\tpermissions = Creator.getObjectPermissions(@urlParams.spaceId, @userId, key)\n# \t\t\t\tif permissions.allowCreate\n# \t\t\t\t\t@bodyParams.space = @urlParams.spaceId\n# \t\t\t\t\tentityId = collection.insert @bodyParams\n# \t\t\t\t\tentity = collection.findOne entityId\n# \t\t\t\t\tentities = []\n# \t\t\t\t\tif entity\n# \t\t\t\t\t\tbody = {}\n# \t\t\t\t\t\theaders = {}\n# \t\t\t\t\t\tentities.push entity\n# \t\t\t\t\t\tbody['@odata.context'] = SteedosOData.getODataContextPath(@urlParams.spaceId, key) + '/$entity'\n# \t\t\t\t\t\tentity_OdataProperties = setOdataProperty(entities,@urlParams.spaceId, key)\n# \t\t\t\t\t\tbody['value'] = entity_OdataProperties\n# \t\t\t\t\t\theaders['Content-type'] = 'application/json;odata.metadata=minimal;charset=utf-8'\n# \t\t\t\t\t\theaders['OData-Version'] = SteedosOData.VERSION\n# \t\t\t\t\t\t{body: body, headers: headers}\n# \t\t\t\t\telse\n# \t\t\t\t\t\treturn{\n# \t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\tbody: setErrorMessage(404,collection,key,'post')\n# \t\t\t\t\t\t}\n# \t\t\t\telse\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 403\n# \t\t\t\t\t\tbody: setErrorMessage(403,collection,key,'post')\n# \t\t\t\t\t}\n# \t\t\tcatch e\n# \t\t\t\treturn handleError e\n# \t\tget:()->\n# \t\t\tkey = @urlParams.object_name\n# \t\t\tif key.indexOf(\"(\") > -1\n# \t\t\t\tbody = {}\n# \t\t\t\theaders = {}\n# \t\t\t\tcollectionInfo = key\n# \t\t\t\tfieldName = @urlParams._id.split('_expand')[0]\n# \t\t\t\tcollectionInfoSplit = collectionInfo.split('(')\n# \t\t\t\tcollectionName = collectionInfoSplit[0]\n# \t\t\t\tid = collectionInfoSplit[1].split('\\'')[1]\n\n# \t\t\t\tcollection = Creator.getCollection(collectionName, @urlParams.spaceId)\n# \t\t\t\tfieldsOptions = {}\n# \t\t\t\tfieldsOptions[fieldName] = 1\n# \t\t\t\tentity = collection.findOne({_id: id}, {fields: fieldsOptions})\n\n# \t\t\t\tfieldValue = null\n# \t\t\t\tif entity\n# \t\t\t\t\tfieldValue = entity[fieldName]\n\n# \t\t\t\tobj = Creator.getObject(collectionName, @urlParams.spaceId)\n# \t\t\t\tfield = obj.fields[fieldName]\n\n# \t\t\t\tif field and fieldValue and (field.type is 'lookup' or field.type is 'master_detail')\n# \t\t\t\t\tlookupCollection = Creator.getCollection(field.reference_to, @urlParams.spaceId)\n# \t\t\t\t\tqueryOptions = {fields: {}}\n# \t\t\t\t\treadable_fields = Creator.getFields(field.reference_to, @urlParams.spaceId, @userId)\n# \t\t\t\t\t_.each readable_fields, (f)->\n# \t\t\t\t\t\tif f.indexOf('$') < 0\n# \t\t\t\t\t\t\tqueryOptions.fields[f] = 1\n\n# \t\t\t\t\tif field.multiple\n# \t\t\t\t\t\tvalues = []\n# \t\t\t\t\t\tlookupCollection.find({_id: {$in: fieldValue}}, queryOptions).forEach (obj)->\n# \t\t\t\t\t\t\t_.each obj, (v, k)->\n# \t\t\t\t\t\t\t\tif _.isArray(v) || (_.isObject(v) && !_.isDate(v))\n# \t\t\t\t\t\t\t\t\tobj[k] = JSON.stringify(v)\n# \t\t\t\t\t\t\tvalues.push(obj)\n# \t\t\t\t\t\tbody['value'] = values\n# \t\t\t\t\t\tbody['@odata.context'] = SteedosOData.getMetaDataPath(@urlParams.spaceId) + \"##{collectionInfo}/#{@urlParams._id}\"\n# \t\t\t\t\telse\n# \t\t\t\t\t\tbody = lookupCollection.findOne({_id: fieldValue}, queryOptions) || {}\n# \t\t\t\t\t\t_.each body, (v, k)->\n# \t\t\t\t\t\t\tif _.isArray(v) || (_.isObject(v) && !_.isDate(v))\n# \t\t\t\t\t\t\t\tbody[k] = JSON.stringify(v)\n# \t\t\t\t\t\tbody['@odata.context'] = SteedosOData.getMetaDataPath(@urlParams.spaceId) + \"##{field.reference_to}/$entity\"\n\n# \t\t\t\telse\n# \t\t\t\t\tbody['@odata.context'] = SteedosOData.getMetaDataPath(@urlParams.spaceId) + \"##{collectionInfo}/#{@urlParams._id}\"\n# \t\t\t\t\tbody['value'] = fieldValue\n\n# \t\t\t\theaders['Content-type'] = 'application/json;odata.metadata=minimal;charset=utf-8'\n# \t\t\t\theaders['OData-Version'] = SteedosOData.VERSION\n\n# \t\t\t\t{body: body, headers: headers}\n# \t\t\telse\n# \t\t\t\ttry\n# \t\t\t\t\tobject = Creator.getObject(key, @urlParams.spaceId)\n# \t\t\t\t\tif not object?.enable_api\n# \t\t\t\t\t\treturn {\n# \t\t\t\t\t\t\tstatusCode: 401\n# \t\t\t\t\t\t\tbody: setErrorMessage(401)\n# \t\t\t\t\t\t}\n# \t\t\t\t\tcollection = Creator.getCollection(key, @urlParams.spaceId)\n# \t\t\t\t\tif not collection\n# \t\t\t\t\t\treturn{\n# \t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\tbody: setErrorMessage(404,collection,key)\n# \t\t\t\t\t\t}\n\n# \t\t\t\t\tpermissions = Creator.getObjectPermissions(@urlParams.spaceId, @userId, key)\n# \t\t\t\t\tif permissions.allowRead\n# \t\t\t\t\t\tunreadable_fields = permissions.unreadable_fields || []\n# \t\t\t\t\t\tremoveInvalidMethod(@queryParams)\n# \t\t\t\t\t\tqs = decodeURIComponent(querystring.stringify(@queryParams))\n# \t\t\t\t\t\tcreateQuery = if qs then odataV4Mongodb.createQuery(qs) else odataV4Mongodb.createQuery()\n# \t\t\t\t\t\tcreateQuery.query._id =  @urlParams._id\n# \t\t\t\t\t\tif key is 'cfs.files.filerecord'\n# \t\t\t\t\t\t\tcreateQuery.query['metadata.space'] = @urlParams.spaceId\n# \t\t\t\t\t\telse if key != 'spaces'\n# \t\t\t\t\t\t\tcreateQuery.query.space =  @urlParams.spaceId\n# \t\t\t\t\t\tunreadable_fields = permissions.unreadable_fields || []\n# \t\t\t\t\t\tif createQuery.projection\n# \t\t\t\t\t\t\tprojection = {}\n# \t\t\t\t\t\t\t_.keys(createQuery.projection).forEach (key)->\n# \t\t\t\t\t\t\t\tif _.indexOf(unreadable_fields, key) < 0\n# \t\t\t\t\t\t\t\t\t# if not ((fields[key]?.type == 'lookup' or fields[key]?.type == 'master_detail') and fields[key].multiple)\n# \t\t\t\t\t\t\t\t\tprojection[key] = 1\n# \t\t\t\t\t\t\tcreateQuery.projection = projection\n# \t\t\t\t\t\tif not createQuery.projection or !_.size(createQuery.projection)\n# \t\t\t\t\t\t\treadable_fields = Creator.getFields(key, @urlParams.spaceId, @userId)\n# \t\t\t\t\t\t\tfields = object.fields\n# \t\t\t\t\t\t\t_.each readable_fields, (field) ->\n# \t\t\t\t\t\t\t\tif field.indexOf('$') < 0\n# \t\t\t\t\t\t\t\t\tcreateQuery.projection[field] = 1\n# \t\t\t\t\t\tentity = collection.findOne(createQuery.query,visitorParser(createQuery))\n# \t\t\t\t\t\tentities = []\n# \t\t\t\t\t\tif entity\n# \t\t\t\t\t\t\tisAllowed = entity.owner == @userId or permissions.viewAllRecords or (permissions.viewCompanyRecords && isSameCompany(@urlParams.spaceId, @userId, entity.company_id))\n# \t\t\t\t\t\t\tif object.enable_share and !isAllowed\n# \t\t\t\t\t\t\t\tshares = []\n# \t\t\t\t\t\t\t\torgs = Steedos.getUserOrganizations(@urlParams.spaceId, @userId, true)\n# \t\t\t\t\t\t\t\tshares.push { \"sharing.u\": @userId }\n# \t\t\t\t\t\t\t\tshares.push { \"sharing.o\": { $in: orgs } }\n# \t\t\t\t\t\t\t\tisAllowed = collection.findOne({ _id: @urlParams._id, \"$or\": shares }, { fields: { _id: 1 } })\n# \t\t\t\t\t\t\tif isAllowed\n# \t\t\t\t\t\t\t\tbody = {}\n# \t\t\t\t\t\t\t\theaders = {}\n# \t\t\t\t\t\t\t\tentities.push entity\n# \t\t\t\t\t\t\t\tdealWithExpand(createQuery, entities, key, @urlParams.spaceId)\n# \t\t\t\t\t\t\t\tbody['@odata.context'] = SteedosOData.getODataContextPath(@urlParams.spaceId, key) + '/$entity'\n# \t\t\t\t\t\t\t\tentity_OdataProperties = setOdataProperty(entities,@urlParams.spaceId, key)\n# \t\t\t\t\t\t\t\t_.extend body,entity_OdataProperties[0]\n# \t\t\t\t\t\t\t\theaders['Content-type'] = 'application/json;odata.metadata=minimal;charset=utf-8'\n# \t\t\t\t\t\t\t\theaders['OData-Version'] = SteedosOData.VERSION\n# \t\t\t\t\t\t\t\t{body: body, headers: headers}\n# \t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\treturn{\n# \t\t\t\t\t\t\t\t\tstatusCode: 403\n# \t\t\t\t\t\t\t\t\tbody: setErrorMessage(403,collection,key,'get')\n# \t\t\t\t\t\t\t\t}\n# \t\t\t\t\t\telse\n# \t\t\t\t\t\t\treturn{\n# \t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\tbody: setErrorMessage(404,collection,key,'get')\n# \t\t\t\t\t\t\t}\n# \t\t\t\t\telse\n# \t\t\t\t\t\treturn{\n# \t\t\t\t\t\t\tstatusCode: 403\n# \t\t\t\t\t\t\tbody: setErrorMessage(403,collection,key,'get')\n# \t\t\t\t\t\t}\n# \t\t\t\tcatch e\n# \t\t\t\t\treturn handleError e\n\n# \t\tput:()->\n# \t\t\ttry\n# \t\t\t\tkey = @urlParams.object_name\n# \t\t\t\tobject = Creator.getObject(key, @urlParams.spaceId)\n# \t\t\t\tif not object?.enable_api\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 401\n# \t\t\t\t\t\tbody: setErrorMessage(401)\n# \t\t\t\t\t}\n\n# \t\t\t\tcollection = Creator.getCollection(key, @urlParams.spaceId)\n# \t\t\t\tif not collection\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\tbody: setErrorMessage(404,collection,key)\n# \t\t\t\t\t}\n# \t\t\t\tspaceId = @urlParams.spaceId\n# \t\t\t\tpermissions = Creator.getObjectPermissions(spaceId, @userId, key)\n# \t\t\t\tif key == \"users\"\n# \t\t\t\t\trecord_owner = @urlParams._id\n# \t\t\t\telse\n# \t\t\t\t\trecord_owner = collection.findOne({ _id: @urlParams._id }, { fields: { owner: 1 } })?.owner\n\n# \t\t\t\tcompanyId = collection.findOne({ _id: @urlParams._id }, { fields: { company_id: 1 } })?.company_id\n\n# \t\t\t\tisAllowed = permissions.modifyAllRecords or (permissions.allowEdit and record_owner == @userId ) or (permissions.modifyCompanyRecords && isSameCompany(spaceId, @userId, companyId))\n# \t\t\t\tif isAllowed\n# \t\t\t\t\tcheckGlobalRecord(collection, @urlParams._id, object)\n# \t\t\t\t\tselector = {_id: @urlParams._id, space: spaceId}\n# \t\t\t\t\tif spaceId is 'guest' or spaceId is 'common' or key == \"users\"\n# \t\t\t\t\t\tdelete selector.space\n# \t\t\t\t\tfields_editable = true\n# \t\t\t\t\t_.keys(@bodyParams.$set).forEach (key)->\n# \t\t\t\t\t\tif _.indexOf(permissions.uneditable_fields, key) > -1\n# \t\t\t\t\t\t\tfields_editable = false\n# \t\t\t\t\tif fields_editable\n# \t\t\t\t\t\tif key is 'spaces'\n# \t\t\t\t\t\t\tdelete selector.space\n# \t\t\t\t\t\tentityIsUpdated = collection.update selector, @bodyParams\n# \t\t\t\t\t\tif entityIsUpdated\n# \t\t\t\t\t\t\t#statusCode: 201\n# \t\t\t\t\t\t\t# entity = collection.findOne @urlParams._id\n# \t\t\t\t\t\t\t# entities = []\n# \t\t\t\t\t\t\t# body = {}\n# \t\t\t\t\t\t\theaders = {}\n# \t\t\t\t\t\t\tbody = {}\n# \t\t\t\t\t\t\t# entities.push entity\n# \t\t\t\t\t\t\t# body['@odata.context'] = SteedosOData.getODataContextPath(spaceId, key) + '/$entity'\n# \t\t\t\t\t\t\t# entity_OdataProperties = setOdataProperty(entities,spaceId, key)\n# \t\t\t\t\t\t\t# _.extend body,entity_OdataProperties[0]\n# \t\t\t\t\t\t\theaders['Content-type'] = 'application/json;odata.metadata=minimal;charset=utf-8'\n# \t\t\t\t\t\t\theaders['OData-Version'] = SteedosOData.VERSION\n# \t\t\t\t\t\t\t{headers: headers,body:body}\n# \t\t\t\t\t\telse\n# \t\t\t\t\t\t\treturn{\n# \t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\tbody: setErrorMessage(404,collection,key)\n# \t\t\t\t\t\t\t}\n# \t\t\t\t\telse\n# \t\t\t\t\t\treturn{\n# \t\t\t\t\t\t\tstatusCode: 403\n# \t\t\t\t\t\t\tbody: setErrorMessage(403,collection,key,'put')\n# \t\t\t\t\t\t}\n# \t\t\t\telse\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 403\n# \t\t\t\t\t\tbody: setErrorMessage(403,collection,key,'put')\n# \t\t\t\t\t}\n# \t\t\tcatch e\n# \t\t\t\treturn handleError e\n# \t\tdelete:()->\n# \t\t\ttry\n# \t\t\t\tkey = @urlParams.object_name\n# \t\t\t\tobject = Creator.getObject(key, @urlParams.spaceId)\n# \t\t\t\tif not object?.enable_api\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 401\n# \t\t\t\t\t\tbody: setErrorMessage(401)\n# \t\t\t\t\t\t}\n\n# \t\t\t\tcollection = Creator.getCollection(key, @urlParams.spaceId)\n# \t\t\t\tif not collection\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\tbody: setErrorMessage(404,collection,key)\n# \t\t\t\t\t}\n# \t\t\t\tspaceId = @urlParams.spaceId\n# \t\t\t\tpermissions = Creator.getObjectPermissions(@urlParams.spaceId, @userId, key)\n# \t\t\t\trecordData = collection.findOne({_id: @urlParams._id}, { fields: { owner: 1, company_id: 1 } })\n# \t\t\t\trecord_owner = recordData?.owner\n# \t\t\t\tcompanyId = recordData?.company_id\n# \t\t\t\tisAllowed = (permissions.modifyAllRecords and permissions.allowDelete) or (permissions.modifyCompanyRecords and permissions.allowDelete and isSameCompany(spaceId, @userId, companyId)) or (permissions.allowDelete and record_owner==@userId )\n# \t\t\t\tif isAllowed\n# \t\t\t\t\tcheckGlobalRecord(collection, @urlParams._id, object)\n# \t\t\t\t\tselector = {_id: @urlParams._id, space: spaceId}\n# \t\t\t\t\tif spaceId is 'guest'\n# \t\t\t\t\t\tdelete selector.space\n\n# \t\t\t\t\tif object?.enable_trash\n# \t\t\t\t\t\tentityIsUpdated = collection.update(selector, {\n# \t\t\t\t\t\t\t$set: {\n# \t\t\t\t\t\t\t\tis_deleted: true,\n# \t\t\t\t\t\t\t\tdeleted: new Date(),\n# \t\t\t\t\t\t\t\tdeleted_by: @userId\n# \t\t\t\t\t\t\t}\n# \t\t\t\t\t\t})\n# \t\t\t\t\t\tif entityIsUpdated\n# \t\t\t\t\t\t\theaders = {}\n# \t\t\t\t\t\t\tbody = {}\n# \t\t\t\t\t\t\theaders['Content-type'] = 'application/json;odata.metadata=minimal;charset=utf-8'\n# \t\t\t\t\t\t\theaders['OData-Version'] = SteedosOData.VERSION\n# \t\t\t\t\t\t\t{headers: headers,body:body}\n# \t\t\t\t\t\telse\n# \t\t\t\t\t\t\treturn{\n# \t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\tbody: setErrorMessage(404,collection,key)\n# \t\t\t\t\t\t\t}\n# \t\t\t\t\telse\n# \t\t\t\t\t\tif collection.remove selector\n# \t\t\t\t\t\t\theaders = {}\n# \t\t\t\t\t\t\tbody = {}\n# \t\t\t\t\t\t\t# entities.push entity\n# \t\t\t\t\t\t\t# body['@odata.context'] = SteedosOData.getODataContextPath(spaceId, key) + '/$entity'\n# \t\t\t\t\t\t\t# entity_OdataProperties = setOdataProperty(entities,spaceId, key)\n# \t\t\t\t\t\t\t# _.extend body,entity_OdataProperties[0]\n# \t\t\t\t\t\t\theaders['Content-type'] = 'application/json;odata.metadata=minimal;charset=utf-8'\n# \t\t\t\t\t\t\theaders['OData-Version'] = SteedosOData.VERSION\n# \t\t\t\t\t\t\t{headers: headers,body:body}\n# \t\t\t\t\t\telse\n# \t\t\t\t\t\t\treturn{\n# \t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\tbody: setErrorMessage(404,collection,key)\n# \t\t\t\t\t\t\t}\n# \t\t\t\telse\n# \t\t\t\t\treturn {\n# \t\t\t\t\t\tstatusCode: 403\n# \t\t\t\t\t\tbody: setErrorMessage(403,collection,key)\n# \t\t\t\t\t}\n# \t\t\tcatch e\n# \t\t\t\treturn handleError e\n# \t})\n\n# \t# _id可传all\n# \tSteedosOdataAPI.addRoute(':object_name/:_id/:methodName', {authRequired: true, spaceRequired: false}, {\n# \t\tpost: ()->\n# \t\t\ttry\n# \t\t\t\tkey = @urlParams.object_name\n# \t\t\t\tif not Creator.getObject(key, @urlParams.spaceId)?.enable_api\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 401\n# \t\t\t\t\t\tbody: setErrorMessage(401)\n# \t\t\t\t\t}\n# \t\t\t\tcollection = Creator.getCollection(key, @urlParams.spaceId)\n# \t\t\t\tif not collection\n# \t\t\t\t\treturn{\n# \t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\tbody: setErrorMessage(404,collection,key)\n# \t\t\t\t\t}\n\n# \t\t\t\tpermissions = Creator.getObjectPermissions(@urlParams.spaceId, @userId, key)\n# \t\t\t\tif permissions.allowRead\n# \t\t\t\t\tmethodName = @urlParams.methodName\n# \t\t\t\t\tmethods = Creator.Objects[key]?.methods || {}\n# \t\t\t\t\tif methods.hasOwnProperty(methodName)\n# \t\t\t\t\t\tthisObj = {\n# \t\t\t\t\t\t\tobject_name: key\n# \t\t\t\t\t\t\trecord_id: @urlParams._id\n# \t\t\t\t\t\t\tspace_id: @urlParams.spaceId\n# \t\t\t\t\t\t\tuser_id: @userId\n# \t\t\t\t\t\t\tpermissions: permissions\n# \t\t\t\t\t\t}\n# \t\t\t\t\t\treturn methods[methodName].apply(thisObj, [@bodyParams]) || {}\n# \t\t\t\t\telse\n# \t\t\t\t\t\treturn {\n# \t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\tbody: setErrorMessage(404,collection,key)\n# \t\t\t\t\t\t}\n# \t\t\t\telse\n# \t\t\t\t\treturn {\n# \t\t\t\t\t\tstatusCode: 403\n# \t\t\t\t\t\tbody: setErrorMessage(403,collection,key)\n# \t\t\t\t\t}\n# \t\t\tcatch e\n# \t\t\t\treturn handleError e\n\n# \t})\n\n# \t#TODO remove\n# \t_.each [], (value, key, list)-> #Creator.Collections\n# \t\tif not Creator.getObject(key)?.enable_api\n# \t\t\treturn\n\n# \t\tif SteedosOdataAPI\n\n# \t\t\tSteedosOdataAPI.addCollection Creator.getCollection(key),\n# \t\t\t\texcludedEndpoints: []\n# \t\t\t\trouteOptions:\n# \t\t\t\t\tauthRequired: true\n# \t\t\t\t\tspaceRequired: false\n# \t\t\t\tendpoints:\n# \t\t\t\t\tgetAll:\n# \t\t\t\t\t\taction: ->\n# \t\t\t\t\t\t\tcollection = Creator.getCollection(key)\n# \t\t\t\t\t\t\tif not collection\n# \t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Collection not found'}\n\n# \t\t\t\t\t\t\tpermissions = Creator.getObjectPermissions(@urlParams.spaceId, @userId, key)\n# \t\t\t\t\t\t\tif permissions.viewAllRecords or (permissions.allowRead and @userId)\n# \t\t\t\t\t\t\t\t\tremoveInvalidMethod(@queryParams)\n# \t\t\t\t\t\t\t\t\tqs = decodeURIComponent(querystring.stringify(@queryParams))\n# \t\t\t\t\t\t\t\t\tcreateQuery = if qs then odataV4Mongodb.createQuery(qs) else odataV4Mongodb.createQuery()\n\n# \t\t\t\t\t\t\t\t\tif key is 'cfs.files.filerecord'\n# \t\t\t\t\t\t\t\t\t\tcreateQuery.query['metadata.space'] = @urlParams.spaceId\n# \t\t\t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\t\t\tcreateQuery.query.space = @urlParams.spaceId\n\n# \t\t\t\t\t\t\t\t\tif not permissions.viewAllRecords\n# \t\t\t\t\t\t\t\t\t\tcreateQuery.query.owner = @userId\n\n# \t\t\t\t\t\t\t\t\tentities = []\n# \t\t\t\t\t\t\t\t\tif @queryParams.$top isnt '0'\n# \t\t\t\t\t\t\t\t\t\tentities = collection.find(createQuery.query, visitorParser(createQuery)).fetch()\n# \t\t\t\t\t\t\t\t\tscannedCount = collection.find(createQuery.query).count()\n\n# \t\t\t\t\t\t\t\t\tif entities\n# \t\t\t\t\t\t\t\t\t\tdealWithExpand(createQuery, entities, key, @urlParams.spaceId)\n\n# \t\t\t\t\t\t\t\t\t\tbody = {}\n# \t\t\t\t\t\t\t\t\t\theaders = {}\n# \t\t\t\t\t\t\t\t\t\tbody['@odata.context'] = SteedosOData.getODataContextPath(@urlParams.spaceId, key)\n# \t\t\t\t\t\t\t\t\t\tbody['@odata.count'] = scannedCount\n# \t\t\t\t\t\t\t\t\t\tbody['value'] = entities\n# \t\t\t\t\t\t\t\t\t\theaders['Content-type'] = 'application/json;odata.metadata=minimal;charset=utf-8'\n# \t\t\t\t\t\t\t\t\t\theaders['OData-Version'] = SteedosOData.VERSION\n# \t\t\t\t\t\t\t\t\t\t{body: body, headers: headers}\n# \t\t\t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Unable to retrieve items from collection'}\n# \t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\tstatusCode: 400\n# \t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Action not permitted'}\n# \t\t\t\t\tpost:\n# \t\t\t\t\t\taction: ->\n# \t\t\t\t\t\t\tcollection = Creator.getCollection(key)\n# \t\t\t\t\t\t\tif not collection\n# \t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Collection not found'}\n\n# \t\t\t\t\t\t\tpermissions = Creator.getObjectPermissions(@spaceId, @userId, key)\n# \t\t\t\t\t\t\tif permissions.allowCreate\n# \t\t\t\t\t\t\t\t\t@bodyParams.space = @spaceId\n# \t\t\t\t\t\t\t\t\tentityId = collection.insert @bodyParams\n# \t\t\t\t\t\t\t\t\tentity = collection.findOne entityId\n# \t\t\t\t\t\t\t\t\tif entity\n# \t\t\t\t\t\t\t\t\t\tstatusCode: 201\n# \t\t\t\t\t\t\t\t\t\t{status: 'success', value: entity}\n# \t\t\t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'No item added'}\n# \t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\tstatusCode: 400\n# \t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Action not permitted'}\n# \t\t\t\t\tget:\n# \t\t\t\t\t\taction: ->\n# \t\t\t\t\t\t\tcollection = Creator.getCollection(key)\n# \t\t\t\t\t\t\tif not collection\n# \t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Collection not found'}\n\n# \t\t\t\t\t\t\tpermissions = Creator.getObjectPermissions(@spaceId, @userId, key)\n# \t\t\t\t\t\t\tif permissions.allowRead\n# \t\t\t\t\t\t\t\t\tselector = {_id: @urlParams.id, space: @spaceId}\n# \t\t\t\t\t\t\t\t\tentity = collection.findOne selector\n# \t\t\t\t\t\t\t\t\tif entity\n# \t\t\t\t\t\t\t\t\t\t{status: 'success', value: entity}\n# \t\t\t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Item not found'}\n# \t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\tstatusCode: 400\n# \t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Action not permitted'}\n# \t\t\t\t\tput:\n# \t\t\t\t\t\taction: ->\n# \t\t\t\t\t\t\tcollection = Creator.getCollection(key)\n# \t\t\t\t\t\t\tif not collection\n# \t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Collection not found'}\n\n# \t\t\t\t\t\t\tpermissions = Creator.getObjectPermissions(@spaceId, @userId, key)\n# \t\t\t\t\t\t\tif permissions.allowEdit\n# \t\t\t\t\t\t\t\t\tselector = {_id: @urlParams.id, space: @spaceId}\n# \t\t\t\t\t\t\t\t\tentityIsUpdated = collection.update selector, $set: @bodyParams\n# \t\t\t\t\t\t\t\t\tif entityIsUpdated\n# \t\t\t\t\t\t\t\t\t\tentity = collection.findOne @urlParams.id\n# \t\t\t\t\t\t\t\t\t\t{status: 'success', value: entity}\n# \t\t\t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Item not found'}\n# \t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\tstatusCode: 400\n# \t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Action not permitted'}\n# \t\t\t\t\tdelete:\n# \t\t\t\t\t\taction: ->\n# \t\t\t\t\t\t\tcollection = Creator.getCollection(key)\n# \t\t\t\t\t\t\tif not collection\n# \t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Collection not found'}\n\n# \t\t\t\t\t\t\tpermissions = Creator.getObjectPermissions(@spaceId, @userId, key)\n# \t\t\t\t\t\t\tif permissions.allowDelete\n# \t\t\t\t\t\t\t\t\tselector = {_id: @urlParams.id, space: @spaceId}\n# \t\t\t\t\t\t\t\t\tif collection.remove selector\n# \t\t\t\t\t\t\t\t\t\t{status: 'success', message: 'Item removed'}\n# \t\t\t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\t\t\tstatusCode: 404\n# \t\t\t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Item not found'}\n# \t\t\t\t\t\t\telse\n# \t\t\t\t\t\t\t\tstatusCode: 400\n# \t\t\t\t\t\t\t\tbody: {status: 'fail', message: 'Action not permitted'}\n","Meteor.startup(function() {\n  var MeteorODataAPIV4Router, MeteorODataRouter, ODataRouter, app, express;\n  MeteorODataRouter = require('@steedos/core').MeteorODataRouter;\n  ODataRouter = require('@steedos/core').ODataRouter;\n  express = require('express');\n  app = express();\n  app.use('/api/odata/v4', MeteorODataRouter);\n  MeteorODataAPIV4Router = require('@steedos/core').MeteorODataAPIV4Router;\n  if (MeteorODataAPIV4Router) {\n    app.use('/api/v4', MeteorODataAPIV4Router);\n  }\n  WebApp.connectHandlers.use(app);\n  return _.each(Creator.steedosSchema.getDataSources(), function(datasource, name) {\n    var otherApp;\n    if (name !== 'default') {\n      otherApp = express();\n      otherApp.use(\"/api/odata/\" + name, ODataRouter);\n      return WebApp.connectHandlers.use(otherApp);\n    }\n  });\n});\n","Fiber = require('fibers')\n\nbasicAuth = require('basic-auth')\n\nauthorizationCache = {}\n\nJsonRoutes.Middleware.use '/api/odata/v4/', (req, res, next)->\n\n\tFiber(()->\n\t\tif !req.userId\n\t\t\tisAuthed = false\n\t\t\t# oauth2验证\n\t\t\tif req?.query?.access_token\n\t\t\t\tconsole.log 'OAuth2: ', req.query.access_token\n\t\t\t\tuserId = Steedos.getUserIdFromAccessToken(req.query.access_token)\n\t\t\t\tif userId\n\t\t\t\t\tuser = Meteor.users.findOne({_id: userId})\n\t\t\t\t\tif user\n\t\t\t\t\t\tisAuthed = true\n\t\t\t# basic验证\n\t\t\tif req.headers['authorization']\n\t\t\t\tauth = basicAuth.parse(req.headers['authorization'])\n\t\t\t\tif auth\n\t\t\t\t\tuser = Meteor.users.findOne({username: auth.name}, { fields: { 'services': 1 } })\n\t\t\t\t\tif user\n\t\t\t\t\t\tif authorizationCache[auth.name] == auth.pass\n\t\t\t\t\t\t\tisAuthed = true\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tresult = Accounts._checkPassword user, auth.pass\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif !result.error\n\t\t\t\t\t\t\t\tisAuthed = true\n\t\t\t\t\t\t\t\tif _.keys(authorizationCache).length > 100\n\t\t\t\t\t\t\t\t\tauthorizationCache = {}\n\t\t\t\t\t\t\t\tauthorizationCache[auth.name] = auth.pass\n\t\t\tif isAuthed\n\t\t\t\treq.headers['x-user-id'] = user._id\n\t\t\t\ttoken = null\n\t\t\t\tapp_id = \"creator\"\n\t\t\t\tclient_id = \"pc\"\n\t\t\t\tloginTokens = user.services?.resume?.loginTokens\n\t\t\t\tif loginTokens\n\t\t\t\t\tapp_login_token = _.find(loginTokens, (t)->\n\t\t\t\t\t\treturn t.app_id is app_id and t.client_id is client_id\n\t\t\t\t\t)\n\t\t\t\t\ttoken = app_login_token.token if app_login_token\n\n\t\t\t\tif not token\n\t\t\t\t\tauthToken = Accounts._generateStampedLoginToken()\n\t\t\t\t\ttoken = authToken.token\n\t\t\t\t\thashedToken = Accounts._hashStampedToken authToken\n\t\t\t\t\thashedToken.app_id = app_id\n\t\t\t\t\thashedToken.client_id = client_id\n\t\t\t\t\thashedToken.token = token\n\t\t\t\t\tAccounts._insertHashedLoginToken user._id, hashedToken\n\n\t\t\t\tif token\n\t\t\t\t\treq.headers['x-auth-token'] = token\n\t\tnext()\n\t).run()\n","var Fiber, authorizationCache, basicAuth;\n\nFiber = require('fibers');\n\nbasicAuth = require('basic-auth');\n\nauthorizationCache = {};\n\nJsonRoutes.Middleware.use('/api/odata/v4/', function(req, res, next) {\n  return Fiber(function() {\n    var app_id, app_login_token, auth, authToken, client_id, hashedToken, isAuthed, loginTokens, ref, ref1, ref2, result, token, user, userId;\n    if (!req.userId) {\n      isAuthed = false;\n      if (req != null ? (ref = req.query) != null ? ref.access_token : void 0 : void 0) {\n        console.log('OAuth2: ', req.query.access_token);\n        userId = Steedos.getUserIdFromAccessToken(req.query.access_token);\n        if (userId) {\n          user = Meteor.users.findOne({\n            _id: userId\n          });\n          if (user) {\n            isAuthed = true;\n          }\n        }\n      }\n      if (req.headers['authorization']) {\n        auth = basicAuth.parse(req.headers['authorization']);\n        if (auth) {\n          user = Meteor.users.findOne({\n            username: auth.name\n          }, {\n            fields: {\n              'services': 1\n            }\n          });\n          if (user) {\n            if (authorizationCache[auth.name] === auth.pass) {\n              isAuthed = true;\n            } else {\n              result = Accounts._checkPassword(user, auth.pass);\n              if (!result.error) {\n                isAuthed = true;\n                if (_.keys(authorizationCache).length > 100) {\n                  authorizationCache = {};\n                }\n                authorizationCache[auth.name] = auth.pass;\n              }\n            }\n          }\n        }\n      }\n      if (isAuthed) {\n        req.headers['x-user-id'] = user._id;\n        token = null;\n        app_id = \"creator\";\n        client_id = \"pc\";\n        loginTokens = (ref1 = user.services) != null ? (ref2 = ref1.resume) != null ? ref2.loginTokens : void 0 : void 0;\n        if (loginTokens) {\n          app_login_token = _.find(loginTokens, function(t) {\n            return t.app_id === app_id && t.client_id === client_id;\n          });\n          if (app_login_token) {\n            token = app_login_token.token;\n          }\n        }\n        if (!token) {\n          authToken = Accounts._generateStampedLoginToken();\n          token = authToken.token;\n          hashedToken = Accounts._hashStampedToken(authToken);\n          hashedToken.app_id = app_id;\n          hashedToken.client_id = client_id;\n          hashedToken.token = token;\n          Accounts._insertHashedLoginToken(user._id, hashedToken);\n        }\n        if (token) {\n          req.headers['x-auth-token'] = token;\n        }\n      }\n    }\n    return next();\n  }).run();\n});\n","Meteor.startup ->\n\tServiceMetadata = require('odata-v4-service-metadata').ServiceMetadata;\n\tServiceDocument = require('odata-v4-service-document').ServiceDocument;\n\t_NUMBER_TYPES = [\"number\", \"currency\"]\n\n\t_BOOLEAN_TYPES = [\"boolean\"]\n\n\t_DATETIME_OFFSET_TYPES = ['datetime']\n\n\t_NAMESPACE = \"CreatorEntities\"\n\n\tgetObjectsOdataSchema = (spaceId)->\n\t\tschema = {version: SteedosOData.VERSION, dataServices: {schema: []}}\n\n\t\tentities_schema = {}\n\n\t\tentities_schema.namespace = _NAMESPACE\n\n\t\tentities_schema.entityType = []\n\n\t\tentities_schema.annotations = []\n\n\t\t_.each Creator.Collections, (value, key, list)->\n\t\t\t_object = Creator.getObject(key, spaceId)\n\t\t\tif not _object?.enable_api\n\t\t\t\treturn\n\n\t\t\t# 主键\n\t\t\tkeys = [{propertyRef: {name: \"_id\", computedKey: true}}]\n\n\t\t\tentitie = {\n\t\t\t\tname: _object.name\n\t\t\t\tkey:keys\n\t\t\t}\n\n\t\t\tkeys.forEach (_key)->\n\t\t\t\tentities_schema.annotations.push {\n\t\t\t\t\ttarget: _NAMESPACE + \".\" + _object.name + \"/\" + _key.propertyRef.name,\n\t\t\t\t\tannotation: [{\n\t\t\t\t\t\t\"term\": \"Org.OData.Core.V1.Computed\",\n\t\t\t\t\t\t\"bool\": \"true\"\n\t\t\t\t\t}]\n\t\t\t\t}\n\n\t\t\t# EntityType\n\t\t\tproperty = []\n\t\t\tproperty.push {name: \"_id\", type: \"Edm.String\", nullable: false}\n\n\t\t\tnavigationProperty = []\n\n\t\t\t_.forEach _object.fields, (field, field_name)->\n\n\t\t\t\t_property = {name: field_name, type: \"Edm.String\"}\n\n\t\t\t\tif _.contains _NUMBER_TYPES, field.type\n\t\t\t\t\t_property.type = \"Edm.Double\"\n\t\t\t\telse if _.contains _BOOLEAN_TYPES, field.type\n\t\t\t\t\t_property.type = \"Edm.Boolean\"\n\t\t\t\telse if _.contains _DATETIME_OFFSET_TYPES, field.type\n\t\t\t\t\t_property.type = \"Edm.DateTimeOffset\"\n\t\t\t\t\t_property.precision = \"8\"\n\n\t\t\t\tif field.required\n\t\t\t\t\t_property.nullable = false\n\n\t\t\t\tproperty.push _property\n\n\t\t\t\treference_to = field.reference_to\n\n\t\t\t\tif reference_to\n\t\t\t\t\tif !_.isArray(reference_to)\n\t\t\t\t\t\treference_to = [reference_to]\n\n\t\t\t\t\treference_to.forEach (r)->\n\t\t\t\t\t\treference_obj = Creator.getObject(r, spaceId)\n\t\t\t\t\t\tif reference_obj\n\t\t\t\t\t\t\t_name = field_name + SteedosOData.EXPAND_FIELD_SUFFIX\n\t\t\t\t\t\t\tif _.isArray(field.reference_to)\n\t\t\t\t\t\t\t\t_name = field_name + SteedosOData.EXPAND_FIELD_SUFFIX + \".\" + reference_obj.name\n\t\t\t\t\t\t\tnavigationProperty.push {\n\t\t\t\t\t\t\t\tname: _name,\n\t#\t\t\t\t\t\t\ttype: \"Collection(\" + _NAMESPACE + \".\" + reference_obj.name + \")\",\n\t\t\t\t\t\t\t\ttype: _NAMESPACE + \".\" + reference_obj.name\n\t\t\t\t\t\t\t\tpartner: _object.name #TODO\n\t\t\t\t\t\t\t\t_re_name: reference_obj.name\n\t\t\t\t\t\t\t\treferentialConstraint: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tproperty: field_name,\n\t\t\t\t\t\t\t\t\t\treferencedProperty: \"_id\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tconsole.warn \"reference to '#{r}' invalid.\"\n\n\t\t\tentitie.property = property\n\t\t\tentitie.navigationProperty = navigationProperty\n\n\t\t\tentities_schema.entityType.push entitie\n\n\t\tschema.dataServices.schema.push entities_schema\n\n\n\t\tcontainer_schema = {}\n\t\tcontainer_schema.entityContainer = {name: \"container\"}\n\t\tcontainer_schema.entityContainer.entitySet = []\n\n\t\t_.forEach entities_schema.entityType, (_et, k)->\n\t\t\tcontainer_schema.entityContainer.entitySet.push {\n\t\t\t\t\"name\": _et.name,\n\t\t\t\t\"entityType\": _NAMESPACE + \".\" + _et.name,\n\t\t\t\t\"navigationPropertyBinding\": []\n\t\t\t}\n\n\t\t# TODO ServiceMetadata不支持navigationPropertyBinding属性\n#\t\t_.forEach entities_schema.entityType, (_et, k)->\n#\t\t\t_.forEach _et.navigationProperty, (_et_np, np_k)->\n#\t\t\t\t_es = _.find container_schema.entityContainer.entitySet, (_es)->\n#\t\t\t\t\t\t\treturn _es.name == _et_np.partner\n#\n#\t\t\t\t_es?.navigationPropertyBinding.push {\"path\": _et_np._re_name, \"target\": _et_np._re_name}\n#\t\t\t\tconsole.log(\"_es\", _es)\n#\n#\t\tconsole.log(\"container_schema\", JSON.stringify(container_schema))\n\n\t\tschema.dataServices.schema.push container_schema\n\n\t\treturn schema\n\n\tSteedosOdataAPI.addRoute('', {authRequired: SteedosOData.AUTHREQUIRED}, {\n\t\tget: ()->\n\t\t\tcontext = SteedosOData.getMetaDataPath(@urlParams?.spaceId)\n\t\t\tserviceDocument  = ServiceDocument.processMetadataJson(getObjectsOdataSchema(@urlParams?.spaceId), {context: context});\n\t\t\tbody = serviceDocument.document()\n\t\t\treturn {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json; charset=utf-8',\n\t\t\t\t\t'OData-Version': SteedosOData.VERSION\n\t\t\t\t},\n\t\t\t\tbody: serviceDocument.document()\n\t\t\t};\n\t})\n\n\tSteedosOdataAPI.addRoute(SteedosOData.METADATA_PATH, {authRequired: SteedosOData.AUTHREQUIRED}, {\n\t\tget: ()->\n\t\t\tserviceMetadata = ServiceMetadata.processMetadataJson(getObjectsOdataSchema(@urlParams?.spaceId))\n\t\t\tbody = serviceMetadata.document()\n\t\t\treturn {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/xml; charset=utf-8',\n\t\t\t\t\t'OData-Version': SteedosOData.VERSION\n\t\t\t\t},\n\t\t\t\tbody: body\n\t\t\t};\n\t})","Meteor.startup(function() {\n  var ServiceDocument, ServiceMetadata, _BOOLEAN_TYPES, _DATETIME_OFFSET_TYPES, _NAMESPACE, _NUMBER_TYPES, getObjectsOdataSchema;\n  ServiceMetadata = require('odata-v4-service-metadata').ServiceMetadata;\n  ServiceDocument = require('odata-v4-service-document').ServiceDocument;\n  _NUMBER_TYPES = [\"number\", \"currency\"];\n  _BOOLEAN_TYPES = [\"boolean\"];\n  _DATETIME_OFFSET_TYPES = ['datetime'];\n  _NAMESPACE = \"CreatorEntities\";\n  getObjectsOdataSchema = function(spaceId) {\n    var container_schema, entities_schema, schema;\n    schema = {\n      version: SteedosOData.VERSION,\n      dataServices: {\n        schema: []\n      }\n    };\n    entities_schema = {};\n    entities_schema.namespace = _NAMESPACE;\n    entities_schema.entityType = [];\n    entities_schema.annotations = [];\n    _.each(Creator.Collections, function(value, key, list) {\n      var _object, entitie, keys, navigationProperty, property;\n      _object = Creator.getObject(key, spaceId);\n      if (!(_object != null ? _object.enable_api : void 0)) {\n        return;\n      }\n      keys = [\n        {\n          propertyRef: {\n            name: \"_id\",\n            computedKey: true\n          }\n        }\n      ];\n      entitie = {\n        name: _object.name,\n        key: keys\n      };\n      keys.forEach(function(_key) {\n        return entities_schema.annotations.push({\n          target: _NAMESPACE + \".\" + _object.name + \"/\" + _key.propertyRef.name,\n          annotation: [\n            {\n              \"term\": \"Org.OData.Core.V1.Computed\",\n              \"bool\": \"true\"\n            }\n          ]\n        });\n      });\n      property = [];\n      property.push({\n        name: \"_id\",\n        type: \"Edm.String\",\n        nullable: false\n      });\n      navigationProperty = [];\n      _.forEach(_object.fields, function(field, field_name) {\n        var _property, reference_to;\n        _property = {\n          name: field_name,\n          type: \"Edm.String\"\n        };\n        if (_.contains(_NUMBER_TYPES, field.type)) {\n          _property.type = \"Edm.Double\";\n        } else if (_.contains(_BOOLEAN_TYPES, field.type)) {\n          _property.type = \"Edm.Boolean\";\n        } else if (_.contains(_DATETIME_OFFSET_TYPES, field.type)) {\n          _property.type = \"Edm.DateTimeOffset\";\n          _property.precision = \"8\";\n        }\n        if (field.required) {\n          _property.nullable = false;\n        }\n        property.push(_property);\n        reference_to = field.reference_to;\n        if (reference_to) {\n          if (!_.isArray(reference_to)) {\n            reference_to = [reference_to];\n          }\n          return reference_to.forEach(function(r) {\n            var _name, reference_obj;\n            reference_obj = Creator.getObject(r, spaceId);\n            if (reference_obj) {\n              _name = field_name + SteedosOData.EXPAND_FIELD_SUFFIX;\n              if (_.isArray(field.reference_to)) {\n                _name = field_name + SteedosOData.EXPAND_FIELD_SUFFIX + \".\" + reference_obj.name;\n              }\n              return navigationProperty.push({\n                name: _name,\n                type: _NAMESPACE + \".\" + reference_obj.name,\n                partner: _object.name,\n                _re_name: reference_obj.name,\n                referentialConstraint: [\n                  {\n                    property: field_name,\n                    referencedProperty: \"_id\"\n                  }\n                ]\n              });\n            } else {\n              return console.warn(\"reference to '\" + r + \"' invalid.\");\n            }\n          });\n        }\n      });\n      entitie.property = property;\n      entitie.navigationProperty = navigationProperty;\n      return entities_schema.entityType.push(entitie);\n    });\n    schema.dataServices.schema.push(entities_schema);\n    container_schema = {};\n    container_schema.entityContainer = {\n      name: \"container\"\n    };\n    container_schema.entityContainer.entitySet = [];\n    _.forEach(entities_schema.entityType, function(_et, k) {\n      return container_schema.entityContainer.entitySet.push({\n        \"name\": _et.name,\n        \"entityType\": _NAMESPACE + \".\" + _et.name,\n        \"navigationPropertyBinding\": []\n      });\n    });\n    schema.dataServices.schema.push(container_schema);\n    return schema;\n  };\n  SteedosOdataAPI.addRoute('', {\n    authRequired: SteedosOData.AUTHREQUIRED\n  }, {\n    get: function() {\n      var body, context, ref, ref1, serviceDocument;\n      context = SteedosOData.getMetaDataPath((ref = this.urlParams) != null ? ref.spaceId : void 0);\n      serviceDocument = ServiceDocument.processMetadataJson(getObjectsOdataSchema((ref1 = this.urlParams) != null ? ref1.spaceId : void 0), {\n        context: context\n      });\n      body = serviceDocument.document();\n      return {\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n          'OData-Version': SteedosOData.VERSION\n        },\n        body: serviceDocument.document()\n      };\n    }\n  });\n  return SteedosOdataAPI.addRoute(SteedosOData.METADATA_PATH, {\n    authRequired: SteedosOData.AUTHREQUIRED\n  }, {\n    get: function() {\n      var body, ref, serviceMetadata;\n      serviceMetadata = ServiceMetadata.processMetadataJson(getObjectsOdataSchema((ref = this.urlParams) != null ? ref.spaceId : void 0));\n      body = serviceMetadata.document();\n      return {\n        headers: {\n          'Content-Type': 'application/xml; charset=utf-8',\n          'OData-Version': SteedosOData.VERSION\n        },\n        body: body\n      };\n    }\n  });\n});\n","@SteedosOData = {}\nSteedosOData.VERSION = '4.0'\nSteedosOData.AUTHREQUIRED = true\nSteedosOData.API_PATH = '/api/odata/v4/:spaceId'\nSteedosOData.METADATA_PATH = '$metadata'\nSteedosOData.EXPAND_FIELD_SUFFIX = \"_expand\"\nSteedosOData.getRootPath = (spaceId)->\n\treturn Meteor.absoluteUrl('api/odata/v4/' + spaceId)\n\nSteedosOData.getODataPath = (spaceId,object_name)->\n\treturn SteedosOData.getRootPath(spaceId) + \"/#{object_name}\"\n\nif Meteor.isServer\n\tSteedosOData.getMetaDataPath = (spaceId)->\n\t\treturn SteedosOData.getRootPath(spaceId) + \"/#{SteedosOData.METADATA_PATH}\"\n\n\tSteedosOData.getODataContextPath = (spaceId, object_name)->\n\t\treturn SteedosOData.getMetaDataPath(spaceId) + \"##{object_name}\"\n\tSteedosOData.getODataNextLinkPath = (spaceId,object_name)->\n\t\treturn SteedosOData.getRootPath(spaceId) + \"/#{object_name}\"\n\n\n\t@SteedosOdataAPI = new OdataRestivus\n\t\tapiPath: SteedosOData.API_PATH,\n\t\tuseDefaultAuth: true\n\t\tprettyJson: true\n\t\tenableCors: true\n\t\tdefaultHeaders:\n\t\t\t'Content-Type': 'application/json'\n","this.SteedosOData = {};\n\nSteedosOData.VERSION = '4.0';\n\nSteedosOData.AUTHREQUIRED = true;\n\nSteedosOData.API_PATH = '/api/odata/v4/:spaceId';\n\nSteedosOData.METADATA_PATH = '$metadata';\n\nSteedosOData.EXPAND_FIELD_SUFFIX = \"_expand\";\n\nSteedosOData.getRootPath = function(spaceId) {\n  return Meteor.absoluteUrl('api/odata/v4/' + spaceId);\n};\n\nSteedosOData.getODataPath = function(spaceId, object_name) {\n  return SteedosOData.getRootPath(spaceId) + (\"/\" + object_name);\n};\n\nif (Meteor.isServer) {\n  SteedosOData.getMetaDataPath = function(spaceId) {\n    return SteedosOData.getRootPath(spaceId) + (\"/\" + SteedosOData.METADATA_PATH);\n  };\n  SteedosOData.getODataContextPath = function(spaceId, object_name) {\n    return SteedosOData.getMetaDataPath(spaceId) + (\"#\" + object_name);\n  };\n  SteedosOData.getODataNextLinkPath = function(spaceId, object_name) {\n    return SteedosOData.getRootPath(spaceId) + (\"/\" + object_name);\n  };\n  this.SteedosOdataAPI = new OdataRestivus({\n    apiPath: SteedosOData.API_PATH,\n    useDefaultAuth: true,\n    prettyJson: true,\n    enableCors: true,\n    defaultHeaders: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n"]}