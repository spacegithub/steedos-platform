name: object_workflows
label: Object Synchronization Rule
icon: link
hidden: true
fields:
  name:
    label: Name
    type: text
    required: true
  object_name:
    label: Object
    type: master_detail
    required: true
    reference_to: objects
    reference_to_field: name
    optionsFunction: !<tag:yaml.org,2002:js/function> |-
      function () {
              var _options;

              _options = [];

              _.forEach(Creator.objectsByName, function (o, k) {
                if (o.enable_workflow) {
                  return _options.push({
                    label: o.label,
                    value: k,
                    icon: o.icon
                  });
                }
                
              });

              return _options;
            }
  flow_id:
    label: Workflow
    type: lookup
    required: true
    reference_to: flows
  field_map:
    label: Field Mappings（from Object to Workflow）
    type: grid
    is_wide: true
    depend_on:
      - object_name
      - flow_id
  field_map.$.workflow_field:
    label: Field of Workflow
    type: lookup
    depend_on:
      - flow_id
    optionsFunction: !<tag:yaml.org,2002:js/function> |-
      function (values) {
              var fields, flowId, form_fields, form_id, instance_fields, options, res_flow, res_form;
              instance_fields = [];
              form_fields = [];

              if (values != null ? values.flow_id : void 0) {
                flowId = _.isObject(values.flow_id) ? values.flow_id._id : values.flow_id;

                if (!window.ObjectWorkflowsDataCache) {
                  window.ObjectWorkflowsDataCache = {};
                }

                if (!window.ObjectWorkflowsDataCache.flowsMap) {
                  window.ObjectWorkflowsDataCache.flowsMap = {};
                }

                var flowCache = window.ObjectWorkflowsDataCache.flowsMap[flowId];

                if (!flowCache || flowCache._EXPIREDATE < new Date().getTime()) {
                  var flow = Creator.odata.get("flows", flowId, "form");

                  if (flow && flow.form) {
                    var form = Creator.odata.get("forms", flow.form, "current");

                    if (form && form.current) {
                      window.ObjectWorkflowsDataCache.flowsMap[flowId] = Object.assign({
                        _EXPIREDATE: new Date().getTime() + 60 * 1000
                      }, form);
                    }
                  }
                }

                var res_form = window.ObjectWorkflowsDataCache.flowsMap[flowId];

                if (res_form != null ? res_form.current : void 0) {
                  fields = (res_form != null ? res_form.current.fields : void 0) || [];
                  fields.forEach(function (f) {
                    if (f.type === 'section') {
                      if (f.fields) {
                        return f.fields.forEach(function (ff) {
                          return form_fields.push({
                            'label': ff.name || ff.code,
                            'value': ff.code
                          });
                        });
                      }
                    } else if (f.type === 'table') {
                      if (f.fields) {
                        return f.fields.forEach(function (ff) {
                          return form_fields.push({
                            'label': (f.name || f.code) + '=>' + (ff.name || ff.code),
                            'value': f.code + '.' + ff.code
                          });
                        });
                      }
                    } else {
                      return form_fields.push({
                        'label': f.name || f.code,
                        'value': f.code
                      });
                    }
                  });
                }
              }

              options = _.union(instance_fields, form_fields);
              return options;
            }
  field_map.$.object_field:
    label: Field of Object
    type: lookup
    depend_on:
      - object_name
    defaultIcon: service_contract
    optionsFunction: !<tag:yaml.org,2002:js/function> |-
      function (values) {
              var object_name = null;
              if(values && values.object_name){
                object_name = values.object_name;
                if(_.isObject(object_name)){
                  object_name = object_name.name
                }
              }
              return Creator.getObjectLookupFieldOptions(object_name, true, false, true);
            }
  field_map_back:
    label: Field Mappings（from Workflow to Object）
    type: grid
    is_wide: true
    depend_on:
      - object_name
      - flow_id
  field_map_back.$.object_field:
    label: Field of Object
    type: lookup
    depend_on:
      - object_name
    defaultIcon: service_contract
    optionsFunction: !<tag:yaml.org,2002:js/function> |-
      function (values) {
        var object_name = null;
              if(values && values.object_name){
                object_name = values.object_name;
                if(_.isObject(object_name)){
                  object_name = object_name.name
                }
              }
              return Creator.getObjectLookupFieldOptions(object_name, true, false, true);
            }
  field_map_back.$.workflow_field:
    label: Field of Workflow
    type: lookup
    depend_on:
      - flow_id
    optionsFunction: !<tag:yaml.org,2002:js/function> |-
      function (values) {
              var fields, flowId, form_fields, form_id, instance_fields, options, res_flow, res_form;
              instance_fields = [{
                value: "instance.name",
                label: t("object_workflows_field_field_map_$_workflow_field_instance_name")
              }, {
                value: "instance.submitter_name",
                label: t("object_workflows_field_field_map_$_workflow_field_submitter_name")
              }, {
                value: "instance.applicant_name",
                label: t("object_workflows_field_field_map_$_workflow_field_applicant_name")
              }, {
                value: "instance.applicant_company",
                label: t("object_workflows_field_field_map_$_workflow_field_applicant_company")
              }, {
                value: "instance.applicant_organization",
                label: t("object_workflows_field_field_map_$_workflow_field_applicant_organization")
              }, {
                value: "instance.applicant_organization_name",
                label: t("object_workflows_field_field_map_$_workflow_field_applicant_organization_name")
              }, {
                value: "instance.applicant_organization_fullname",
                label: t("object_workflows_field_field_map_$_workflow_field_applicant_organization_fullname")
              }, {
                value: "instance.state",
                label: t("object_workflows_field_field_map_$_workflow_field_state")
              }, {
                value: "instance.current_step_name",
                label: t("object_workflows_field_field_map_$_workflow_field_current_step_name")
              }, {
                value: "instance.flow_name",
                label: t("object_workflows_field_field_map_$_workflow_field_flow_name")
              }, {
                value: "instance.category_name",
                label: t("object_workflows_field_field_map_$_workflow_field_category_name")
              }, {
                value: "instance.submit_date",
                label: t("object_workflows_field_field_map_$_workflow_field_submit_date")
              }, {
                value: "instance.finish_date",
                label: t("object_workflows_field_field_map_$_workflow_field_finish_date")
              }, {
                value: "instance.final_decision",
                label: t("object_workflows_field_field_map_$_workflow_field_final_decision")
              }];
              form_fields = [];

              if (values != null ? values.flow_id : void 0) {
                flowId = _.isObject(values.flow_id) ? values.flow_id._id : values.flow_id;

                if (!window.ObjectWorkflowsDataCache) {
                  window.ObjectWorkflowsDataCache = {};
                }

                if (!window.ObjectWorkflowsDataCache.flowsMap) {
                  window.ObjectWorkflowsDataCache.flowsMap = {};
                }

                var flowCache = window.ObjectWorkflowsDataCache.flowsMap[flowId];

                if (!flowCache || flowCache._EXPIREDATE < new Date().getTime()) {
                  var flow = Creator.odata.get("flows", flowId, "form");

                  if (flow && flow.form) {
                    var form = Creator.odata.get("forms", flow.form, "current");

                    if (form && form.current) {
                      window.ObjectWorkflowsDataCache.flowsMap[flowId] = Object.assign({
                        _EXPIREDATE: new Date().getTime() + 60 * 1000
                      }, form);
                    }
                  }
                }

                var res_form = window.ObjectWorkflowsDataCache.flowsMap[flowId];

                if (res_form != null ? res_form.current : void 0) {
                  fields = (res_form != null ? res_form.current.fields : void 0) || [];
                  fields.forEach(function (f) {
                    if (f.type === 'section') {
                      if (f.fields) {
                        return f.fields.forEach(function (ff) {
                          return form_fields.push({
                            'label': ff.name || ff.code,
                            'value': ff.code
                          });
                        });
                      }
                    } else if (f.type === 'table') {
                      if (f.fields) {
                        return f.fields.forEach(function (ff) {
                          return form_fields.push({
                            'label': (f.name || f.code) + '=>' + (ff.name || ff.code),
                            'value': f.code + '.' + ff.code
                          });
                        });
                      }
                    } else {
                      return form_fields.push({
                        'label': f.name || f.code,
                        'value': f.code
                      });
                    }
                  });
                }
              }

              options = _.union(instance_fields, form_fields);
              return options;
            }
  field_map_script:
    label: Synchronization Script（from Object to Workflow）
    type: textarea
    is_wide: true
    group: Script
  field_map_back_script:
    label: Synchronization Script（from Workflow to Object）
    type: textarea
    is_wide: true
    group: Script
  sync_attachment:
    label: Synchronization Mode of Attachment
    type: select
    options:
      - label: No Synchronization
        value: "null"
      - label: Synchronize the Latest Version
        value: lastest
      - label: Synchronize All Versions
        value: all
    required: true
list_views:
  default:
    columns:
      - name
      - object_name
      - flow_id
  all:
    label: All Rules
    filter_scope: space
actions:
  forceSync:
    label: sync history approvals
permission_set:
  user:
    allowCreate: false
    allowDelete: false
    allowEdit: false
    allowRead: true
    modifyAllRecords: false
    viewAllRecords: true
  admin:
    allowCreate: true
    allowDelete: true
    allowEdit: true
    allowRead: true
    modifyAllRecords: true
    viewAllRecords: true
